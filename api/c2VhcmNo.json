[{"title":"问题1：三步问题","date":"2020-06-28T04:55:16.000Z","date_formatted":{"ll":"Jun 28, 2020","L":"06/28/2020","MM-DD":"06-28"},"updated":"2020-06-28T05:53:46.797Z","content":"题目描述\n  有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。（提示在页尾）\n个人思路\n  经典斐波拉契数列问题的变形。\n个人解答\n1234567int Count(int n)&#123;    if(n &lt; 0)return 0;    else if(n &#x3D;&#x3D; 0)&#123;        return 1;     &#125;    else return count(n-1)+count(n-2)+count(n-3);&#125;\n复杂度分析\n  每次都有3个分支，经典O(3^n)。\n题目解析\n  -蛮力法: 用递归法可以很容易就实现这个算法，只需要遵循如下思路，即countWays(n-1)+countWays(n-2)+countWays(n-3)。\n  -制表法: 记录已经计算过的结果方式重复计算。（原来也遇到过，又给忘了）\n  重要的一点是，无论是否使用制表法，注意上楼梯的方式总数很快就会突破整数（int型）的上限而溢出。当n=37时，结果就会溢出。使用long可以撑久一点儿，但也不能从根本上解决问题。\n标准解答（制表法）\n12345678910111213141516171819static int CountWay(int n)&#123;    int[] memo &#x3D; new int[n+1];    for(int i &#x3D; 0; i &lt; memo.Length; i++)&#123;        memo[i] &#x3D; -1;    &#125;    return CountWay(n,memo);    &#125;static int CountWay(int n, int[] memo)&#123;        if(n &lt; 0)return 0;        else if(n &#x3D;&#x3D; 0)return 1;        else if(memo[n] &gt; -1)&#123;            return memo[n];        &#125;        else&#123;            memo[n] &#x3D; CountWay(n-1,memo) + CountWay(n-2,memo) + CountWay(n-3,memo);            return memo[n];        &#125;    &#125;\n复杂度分析\n  也是经典O(3^n)，不过会快很多。\n反思\n  对性能以及算法的可行性不敏感，没有考虑边界问题。\n提示：#152，#178，#217，#237，#262，#359\n  -自上而下地处理这个问题。小孩的最后一跳是什么？\n  -如果知道跳到第100级台阶之前的每一级台阶的跳法数量，可以计算第100级台阶的跳法数量吗？\n  -可以通过步数99、98、97的数量，来计算100步的数量。这对应孩子最后迈1步、2步或3步。我们把它们加起来还是相乘？也就是说，它是f(100)=f(99)+f(98)+f(97)或者f(100)=f(99)×f(98)×f(97)吗？\n  -当“我们这样做然后那样做”时，将这些值相乘。当“我们这样做或者那样做”时，将这些值相加。\n  -这个方法的运行时间是多少？仔细想想。你能优化它吗？\n  -尝试用制表法的方式优化效率低下的递归过程。\n","plink":"http://Ssssshinji.github.io/2020/06/28/问题1：三步问题/"},{"title":"问题合集：逻辑类","date":"2020-06-28T04:08:30.000Z","date_formatted":{"ll":"Jun 28, 2020","L":"06/28/2020","MM-DD":"06-28"},"updated":"2020-06-28T04:52:40.950Z","content":"\n题目描述\n  较重的药丸。有20瓶药丸，其中19瓶装有1.0克的药丸，余下1瓶装有1.1克的药丸。给你一台称重精准的天平，怎么找出比较重的那瓶药丸？天平只能用一次。（提示在后面）\n个人思路\n  只能称重一次，可能的操作无非就是分成两组称重罢了。分成2组，一组10个药丸。这时候一边重一边轻。依次对调两边相同位置的药丸，比较重的药丸在对调后使轻的那一侧变重。\n题目解析\n  -有时候，严格的限制条件反倒能提供解题的线索。在这个问题中，限制条件是天平只能用一次。天平只能用一次，从而得出一个有趣的事实，即一次必须同时称很多药丸，其实更准确地说，是必须从19瓶中拿出药丸进行称重。否则，如果跳过2瓶或更多瓶药丸，又该如何区分没称过的那几瓶呢？别忘了，天平只能用一次。\n  那么，该怎么称重取自多个药瓶的药丸，并确定哪一瓶装有比较重的药丸？假设只有2瓶药丸，其中一瓶的药丸比较重。每瓶取出一粒药丸，称得重量为2.1克，但无从知晓这多出来的0.1克来自哪一瓶。我们必须设法区分这些药瓶。\n  如果从药瓶#1取出一粒药丸，从药瓶#2取出两粒药丸，那么，称得重量为多少呢？结果要依情况而定。如果药瓶#1的药丸较重，则称得重量为3.1克。如果药瓶#2的药丸较重，则称得重量为3.2克。这就是这个问题的接替窍门。\n  称一堆药丸时，我们会有个“预期”重量。借由预期重量和实测重量之间的差别，就能得出哪一瓶药丸比较重，前提是从每个药瓶取出不同数量的药丸。\n  将之前两瓶药丸的解法加以推广，就能得到完整解法，即从药瓶#1取出一粒药丸，从药瓶#2取出两粒，从药瓶#3取出三粒，以此类推。如果每粒药丸均重1克，则称得总重量为210克（1+2+…+20=20×21/2=210），“多出来的”重量必定来自每粒多0.1克的药丸。\n  药瓶的编号可由下列算式得出：\n$$\\frac{weight - 210grams} {0.1grams}$$\n因此，若这堆药丸称得重量为211.3克，则药瓶#13装有较重的药丸。\n反思\n  自己的思路实际上是用了多次天平，违背了题意。忽略了重量与数量之间的，预期重量与实际重量之间的关系。\n提示\n  -你只能使用天平一次。这意味着必须使用所有或几乎所有的药瓶。还必须使用不同的处理方法，否则你无法将它们区分开来。\n  -如果你把每个瓶子中的一粒药丸放在天平上，会怎么样？如果你从每个瓶子中取两粒药丸放在天平上，又会如何？\n  -想象一下只有3个瓶子，其中一瓶中有更重的药丸。假设你从每个瓶子中分别取出不同数量的药丸放在天平上（例如，从药瓶#1中取出5粒药丸，从药瓶#2中取出2粒药丸，从药瓶#3中取出9粒药丸），天平会怎样？\n  -你应该能得到一个会告诉你哪一个是重瓶子的基于重量的方程。\n题目描述\n  有个篮球框，下面两种玩法可任选一种。\n  玩法1：一次出手机会，投篮命中得分。\n  玩法2：三次出手机会，必须投中两次。\n  如果p是某次投篮命中的概率，则p的值为多少时才会选择玩法1或玩法2？（提示在后面）\n个人思路\n  第一种玩法得分的概率和第二种玩法得分的概率比较即可。第一种是\\(p\\),第二种是\\(1-c_3^1 p^1(1-p)^2\\)。\n题目解析\n  与个人思路基本相同\n提示\n  -分别计算赢得第一场比赛和赢得第二场比赛的概率，然后对其进行比较。\n  -要计算玩法2获胜的概率，首先要计算第1、2次投中，第3次未投中的概率。\n  -如果两个事件是互斥的（它们不能同时发生），你可以将它们的概率加在一起。你能找到一组互斥的事件，代表三次投篮中的两次吗？\n  -三投两中的概率为：（第1、2次投中，第3次未投中）的概率+（第1、3次投中，第2次未投中）的概率+（第1次未投中，第2、3次投中）的概率+（3次全投中）的概率。\n","plink":"http://Ssssshinji.github.io/2020/06/28/问题合集：逻辑类/"},{"title":"面试经验汇总","date":"2020-06-27T14:12:05.000Z","date_formatted":{"ll":"Jun 27, 2020","L":"06/27/2020","MM-DD":"06-27"},"updated":"2020-06-28T14:43:08.752Z","content":"腾讯IEG 技术美术\n准备资料\n  简历+作品集（ai&amp;ps、blender&amp;3dsmax、ae、unity shader样例、unity shader综合场景）\n面试官提问（一面）\n  1.自我介绍\n  2.对PBR的理解\n  3.迪士尼pbr材质实现方式\n  4.有没有做过pbr样例（衣服、头发、皮肤），遇到过什么难题\n  5.挑了几个shader，讲一下具体代码实现，如何优化\n  6.法线贴图的原理\n  7.写过什么配合dcc的脚本\n  8.假如ik骨模型，手臂末端出现扭曲，原因是、如何解决、有没有写过处理模型骨骼错误的脚本\n  9.比较喜欢什么风格的游戏？具体是什么游戏？假如实现某个游戏里某个效果，怎么写shader\n  10.在网易实习的时候负责的游戏项目是？项目中遇到的难点、如何解决\n  11.对TA各个方面学习的规划是什么、通过什么途径进行学习\n受验者提问\n  1.进组之后，会负责的游戏是？什么风格？答： 秦时明月（ARPG）\n  2.在项目中，期望我主攻的方向是？答：看你的想法。\n面试官提问（二面）\n  1.渲染管线的流程\n  2.对PBR的看法（问题重复了，这个问题感觉是必问的了，注意一定要回答的全面一些，不要局限于材质）\n  3.对作品集里比较复杂一些的shader问了一些实现原理\n反思\n  每个作品都应该是你的脸，给别人看的脸要是丑陋的话，只能认为自己的审美问题很大。问题里PBR应该是标配。我的理解里PBR是：尝试用计算机，呈现一个符合现实世界中物理定律的画面。那这里就包含：美术资源，摄像机，光照，渲染管线，Shader，后期。并不只是一个材质，一个光照算法，而且综合起来的所有种种。看到一句话感触很深：**瓶颈的存在更多的是因为自身知识的匮乏。**你不了解它或者你自以为了解它，就是最大的瓶颈。\n网易互娱 游戏研发\n面试官提问\n  1.介绍一下自己吧\n  2.说一说你实习期间做过的具体内容，以及部分的实现（包括常规的Unity客户端开发、引擎小工具插件的制作、渲染和优化相关）\n  3.你觉得自己在实习期间解决的最难的一个问题是什么，以及如何解决的\n  4.你觉得自己在项目组里面自身水平能占前百分之多少\n  5.你觉得自己和正式员工相比，最大的差距是什么\n  6.你有和团队合作的经验吗，期间碰到的问题是怎么一起解决的\n  7.讲一讲你在校期间的项目（主要讲楼主本科期间做过的一个游戏Demo和研究生期间的一个图形学项目）\n  8.最近有在看一些什么东西吗，分享一个相关内容？\n中间的技术问题（基本都是图形学基础相关的问题）：\n  1.描述一下渲染管线\n  2.几何着色器和细分着色器的作用（这里着重问了几何着色器）\n  3.几何着色器可以实现细分着色器的功能吗\n  4.顶点着色器的作用、细分着色器的作用\n  5.一个几何体会走几次顶点着色器\n  6.深度测试有办法提前吗，为什么要提前，怎么提前的（Early-Z）\n  7.Early-Z有使用限制吗（一般不能与AlphaTest混用），为什么不能\n  7.几何着色器处理的对象是什么，片元着色器处理的对象是什么\n  8.多个不透明几何体在摄像机前完全重叠会渲染几次（非透明物体的渲染顺序）\n  9.非透明物体是怎么实现从前往后渲染的\n  10.透明物体的渲染顺序，为什么透明物体要从后往前渲染\n  11.顶点光照和像素光照是怎么做的，假如要用高质量的光照用哪个\n  12.SSAO具体说一下，其中SS是什么意思，为什么叫SS\n  13.假如一个场景很复杂且有很多个光源，如何优化（延迟渲染，以及具体的实现）\n  14.NormalMap了解吗，有没有在不使用NormalMap的情况下计算出法线\n后面的一个算法问题：\n  1.手写push_back\n  2.针对写出的代码的一些问题（楼主一开始写的代码用了memcpy，就问了用memcpy会出现什么问题，主要是浅拷贝和深拷贝的问题。还包括对push_back的时间复杂度的分析）\n最后的一些HR问题：\n  1.有其他想问的吗\n  2.给了offer有多大把握会去\n  3.手上有其他offer吗\n  4.对来上海工作有问题吗\n腾讯 游戏客户端开发 字节跳动 游戏引擎研发\n面试官提问(一面)\nC++基础：\n  1.stl的vector和list的区别，增删分别的时间复杂度\n  2.虚函数机制\n  3.C11的新特性\n计算机网络：\n  1.解释TCP3次握手\n图形学：\n  1.速度过快/体积过小导致物理引擎检测不到碰撞，如何解决\n开放性问题：\n  1.如何优化内存，实际开发过程中用过什么优化内存的方法\n  2.如果有对象要频繁创建和删除，用什么减少开销。(对象池)\n  3.对象池的大小通常如何决定\n面试官提问(二面)\n  二面面试官给我发了一个腾讯文档，考8道C++基础题，涉及到C++自定义类的大小如何决定(默认大对齐)、右值引用、模板类、STL的iterator使用等等，在面试官纠正下我勉勉强强做出了7道，感觉还是蛮难的。题就不公开放了，有小伙伴需要的话私信我单独发吧。\n  三面给我印象不是很深，好像是问了问我简历里的项目，然后我叽里咕噜跟面试官说了一堆，说了啥我已经忘了，毕竟面试里说的那些高大上的话太羞耻了根本不敢回忆😂\n字节 游戏引擎研发\n面试官提问(一面)\nC++基础：\n  1.几个stl容器的底层实现\n  2.右值引用和move构造\n  3.const、static关键字\n  4.C++里的lambda函数\n  5.指针和引用的区别\n软件工程：\n  1.介绍几个设计模式\n  2.C++里的面向对象\n图形学：\n  1.介绍渲染管线\n  2.解释纹理采样的两个模式\n手撕代码：前序遍历\n面试官提问(二面)\nC++基础：\n  1.解释C++的多态如何实现\n  2.解释类模板和模板类的区别\n  3.右值引用、move语义\n图形学：\n  1.介绍顶点处理中涉及到的矩阵变换\n  2.介绍一个光照渲染模型(我介绍的是冯氏光照)\n  3.介绍一个消除隐藏面的算法(我介绍的是Z缓存)\n  4.如何解决因为顶点过近和浮点数的精度不足带来的穿模问题\n手撕代码：快排\n面试官提问(三面)\n开放性问题：\n  1.在特定场景如何选择stl容器，以什么为标准？你最近一个应用到这个容器的场景是什么？\n  2.在N*N棋盘地图上放一个圆形技能，检测影响到的玩家对象，用什么数据结构实现？\n  3.不关心顺序的数组如何实现O(1)的删除操作\n  4.以上3个是我印象比较深的问题，后面是一些关于项目经历的提问了，比如有没有值得分享的优化点，最有成就感的是哪个等等。\n反思\n  字节的面试是体验最好的，一个下午就连续完成了3面，第二天就完成了HR面，几天后就来了OC，可以说是非常省时间了。暂且不论最后结果，我在面试的过程也学到了很多东西，面试官很看重思考能力和算法数据结构功底，我问的一些问题面试官也回答得非常有干货。\n网易 客户端引擎\n面试官提问(一面)\n  1.自我介绍\n  2.一道简单的概率题\n  3.一段c语言指针字符串拷贝程序找bug\n  4.法线矩阵和模型矩阵的关系\n  5.列举了解的反走样算法\n  6.TAA实现原理相关的一些问题\n  7.次表面散射怎么做的\n  8.虚拟视点方法的原理，怎么计算透射\n  9.了解商业引擎中透射是怎么做的吗\n  10.HIVE渲染引擎里面支持多线程吗\n  11.shadertoy中的体积云怎么实现的\n面试官提问(二面)\n  1.主要做什么东西？做实时渲染多久了？\n  2.介绍一下半透明材质渲染项目\n  3.虚拟视点的缺陷\n  4.虚拟视点怎么计算透射厚度的\n  5.怎么进行采样计算的\n  6.介绍一下HIVE渲染引擎项目\n  7.HIVE引擎具体提供了什么样的功能？实验室使用HIVE一般用来做什么？\n  8.关于opengl和vulkan的shader的区别\n  9.有考虑过引擎怎么支持DX吗\n  10.介绍一下峨眉山渲染项目\n  11.TAA怎么解决重影问题\n  12.SSAO、Bloom、树叶透光的一些原理介绍\n  13.为什么需要HDR和Tone mapping\n  14.介绍一下VR照片墙项目\n  15.用unity用了多久了，做过什么\n  16.如何用程序帮助美术实现雪的绘制效果\n  17.了解AI算法吗\n  18.关于寻路的一些问题\n  19.平面中有很多矩形，给出一个坐标，如何快速找出该坐标属于哪个矩形\n面试官提问（三面）\n  1.在家还是在学校？实习会受疫情影响吗？能实习多久？\n  2.介绍一个你觉得比较好的项目？\n  3.关于虚拟视点原理的解释\n  4.为什么要计算透射厚度\n  5.SSSS算法最普适的原理是什么\n  6.项目能否用于布料绘制相关的一些问题\n  7.解释PBR中用到的公式原理\n  8.TAA的原理\n  9.为什么shading时纹理颜色要转换到线性空间\n  10.reflect反射公式底层怎么写\n  11.空间中怎么判断直线与圆是否想交\n  12.空间中点到直线距离公式\n  13.有什么了解动画相关的？比如骨骼动画？\n  14.一个矩阵插值问题，记不清楚了\n  15.在构造函数里面调用delete this，然后printf(“xxxxx”)，会不会崩溃？ 为什么不会崩溃？“xxxx”在什么内存区?\n  16.二维数组按行打印与按列打印那个更快？\n  17.解释一下cache？cache line有多大？\n  18.a++是线程安全的吗？为什么不是线程安全？ a++翻译成汇编是什么能写出来吗？\n  19.有什么问题要问吗？\n面试官提问(HR面)\n  1.自我介绍\n  2.关于学校的问题\n  3.想做哪方面的东西？\n  4.平时学习什么东西，怎么学习的？\n  5.介绍一下你做的小游戏？\n  6.怎么学习c++的？\n  7.介绍一个最有成就感的项目？\n  8.遇到过什么困难，怎么解决的？\n  9.工作时对团队与项目有什么要求？\n  10.有什么兴趣爱好？\n  11.平时怎么安排学习时间的？\n  12.目前投了哪些公司？投的什么岗位？\n  13.为什么要来网易？\n  14.之前对网易有什么了解吗？\n  15.为什么想去杭州？\n  16.能实习多久？\n  17.有什么问题吗？\n腾讯IEG光子 游戏引擎研发\n面试官提问（提前批一面）\n  1.Blinn-Phong原理\n  2.Shadow Mapping原理\n  3.Perlin噪声原理\n  4.碰撞检测方法\n  5.碰撞检测中高速物体直接穿过包围盒问题\n  6.平滑纹理双线性插值，三线性插值 原理\n  7.为什么uv是在区间[0,1]\n  8.纹理环绕模式有哪些 uv大于1怎么处理\n  9.tcp/udp区别 用途\n  10.排序有哪些，有什么区别\n  11.算法题 单调栈\n  12.玩过哪些游戏\n面试官提问（提前批二面）\n  1.网络有哪几层？\n  2.tcp/udp区别\n  3.为什么会有丢包，丢包时发生了什么？\n  4.在游戏运行时，从服务器发来一段编译好的二进制程序，要怎么在客户端中使用它（非脚本语言）？\n  5.运行时动态链接的原理，过程？\n  6.介绍一下c++的面向对象？\n  7.多态的实现方式？\n  8.虚指针虚表，虚表存在哪里？\n  9.设计一个数据结构，使得两个线程一个写入一个读出互不影响，但是不能用锁？（怎么实现无锁数据结构）\n  10.链表和线性表实现队列的区别？\n  11.说一下A算法？\n  12.A算法的复杂度？\n面试官提问（正式批一面）\n  1.虚函数多态\n  2.虚表存在哪里\n  3.拷贝构造函数和赋值函数的区别\n  4.Blinn-Phong原理\n  5.渲染管线\n  6.骨骼蒙皮原理\n  7.骨骼动画插值\n  8.渲染方程\n  9.图的存储方式\n  10.寻路方法有哪些\n  11.聊一下A*算法\n  12.聊项目\n面试官提问（正式批二面）\n  1.问项目\n  2.带有深度图片中的像素到空间中坐标的变换\n  3.点到平面距离\n  4.碰撞检测\n  5.Shadow Mapping\n  6.阴影失真的解决方案\n  7.齐次坐标的作用\n  8.实例化渲染，降低渲染调用\n  9.基于物理的渲染PBR\n  10.10万个数据选出最大的1万个\n  11.二叉树最近公共祖先\n  12.什么时候能来实习\n面试官提问（HR面）\n  1.自我介绍\n  2.游戏经历\n  3.社团经历\n  4.为什么读双学位\n  5.学习的方法\n  6.什么时候来实习\n  7.有什么其他offer\n整体总结 游戏引擎岗位\n面试官提问\nC++：\n  1.new和malloc区别\n  2.STL中map的实现原理，怎么解决hash冲突\n  3.STL迭代器失效的情况\n  4.右值引用的作用？std::move怎么实现的？\n  5.三个智能指针说一下，weak_ptr如何判断是否失效？sizeof(shared_ptr)多少？\n  6.如何将C++类设置为不可继承\n  7.能否将构造函数设为虚函数\n  8.继承下虚表的变化情况？\n  9.sizeof空结构体\n  10.register变量可以取地址吗？\n  11.指针和引用的区别\n  12.深拷贝和浅拷贝\n  13.函数如何返回多个值（引用或者std::pair,std::tuple)\n  14.C++  UB说几个\n  15.带有虚继承的子类内存分布\n  16.C99变长数组是堆还是栈实现的？\n操作系统&amp;&amp;计算机网络&amp;&amp;多线程:\n  1.线程和进程的区别\n  2.多发射了解吗\n  3.C++中多线程库实现PV操作用什么？\n  4.TCP/IP三次握手，拥塞处理，滑动窗口\n  5.指令重排发生在编译阶段还是运行阶段？\n  6.智能指针是线程安全的吗？\n(这部分感觉问的比较少，也没啥印象了，也都是基础了)\nLua：\n  1.lua的index和newindex是什么？\n  2.lua的垃圾回收机制？是否存在互相引用现象？\n  3.lua的元表怎么重载运算符？\n  4.lua怎么实现面向对象的机制？\n  5.lua的table底层是怎么存储的？\n  6.lua对栈的操作比较麻烦，有优化方法吗？\n  7.lua和C++怎么绑定，有什么库？\n  8.lua的pairs和ipairs有什么区别?\n图形学&amp;&amp;管线:\n  1.渲染管线说一下，前向渲染&amp;&amp;延迟渲染\n  2.延迟渲染的缺点，分块延迟渲染知道吗？为什么延迟渲染带宽会那么大?\n  3.SSAO原理，除了SSAO还有哪些AO？\n  4.阴影贴图原理 PCF是什么 PCF的卷积核有什么？ CSM？\n  5.PBR说一下，几何函数的意义,IBL主要是针对高光还是漫反射光？\n  6.Lod是什么？除了通过摄像机和物体距离判断Lod等级，还有什么方法？\n  7.DrawCall的开销体现在哪里，就是你调用DrawCall,具体干了什么？\n  8.Bloom效果怎么实现？\n  9.描边算法说一下？怎么不用后处理的卷积算子做描边？卡通化渲染呢？\n  10.DX12大概是怎么减少开销的，说一下\n  11.mipmap说一下？它对带宽有什么影响？\n  12.压缩纹理有什么格式？\n  13.Unity外部调试工具有哪些？\n  14.UE4渲染过程大概说一下，随便说几个Pass？\n  15.为什么延迟渲染不能开MSAA？\n  16.有什么方法能降低一个场景中的渲染开销吗？说的越多越好\n  17.纹理数组知道吗？\n  18.实例化是怎么做的？说一下流程和好处\n  19.说一下常见的遮挡剔除算法？\n  20.纹理在移动设备上存储在哪里？\n  21.全局光照能说一下吗？SH也说一下?\n  22.如果把近处平面去掉了会怎么样\n  23.OpenGL的VAO和VBO\n  24.GBuffer一般里面有什么，GBuffer要不要存储position信息，如果不存储，怎么用深度信息进行推导\n  25.卷积知道吗？说一下，模糊呢，为什么需要模糊？\n  26.次表面反射知道吗？\n  27.透明度测试和深度测试的关系？\n  28.法线贴图说一下，切线空间呢？\n  29.移动设备怎么减少DrawCall Overload?\n  30.各向异性在光照模型中如何实现？\n  31.opengl中顶点数据被送入顶点缓冲区时api做了什么？\n  32.phong和billn-phong区别是什么？\n  33.ray marching 知道吗？\n  34.opengl和dx有什么数学上的差别？\n  35.Alpha Blend和Alpha Test在性能上有什么不同？\n  36.光源剔除怎么做？\n  37.遮挡剔除怎么做？知道Mesh Shader吗？\n  38.CS知道吗？为什么有些pass放到cs而不是ps做？\n游戏数学&amp;&amp;算法：\n  1.点沿任意轴旋转的矩阵怎么推导\n  2.怎么判断一个物体是不是在你面前还是身后？\n  3.A*算法说一下，它的最大缺点是什么？\n  4.八叉树算法说一下，它用在哪里居多，物体运动了咋办？\n  5.kd-tree和bsp说一下\n  6.推导View矩阵\n  7.如何判断射线和三角形相交\n  8.如何判断两个立方体是否相交(AABB包围盒相交问题)\n  9.如何判断点是在多边形里面还是外面？\n  10.如何判断三角形和三角形相交?\n  11.说一下点积和乘积的几何意义？\n  12.矩阵左乘和右乘区别？\n游戏开发：\n  1.帧同步中的帧是什么意思？\n  2.常见的设计模式说一下\n  3.Unity的awake,enable,start\n  4.UE4的垃圾回收怎么实现？不会？那说说反射吧\n  5.UE4蓝图和C++代码通信的几个方法？\n  6.ECS框架有什么好处？\n手撕算法：\n  游戏引擎岗对手撕算法，很多公司不怎么要求，很多根本不手撕，因为挖项目会占用很久时。但也有一些公司要，但即使有的话也不难，力扣的变形题或者\n一些常见的算法题，比如考察回溯法，随便刷点就行了，难度easy到middle之间。我刷了300道力扣两遍，朋友没咋刷，没啥太大问题。\n其它问题:\n  1.为什么不读研了?(成绩不太理想，自己早点工作也不是坏事)\n  2.家住在哪里，来这边会不习惯吗？\n  3.咋会对游戏感兴趣，玩过什么手游端游吗？（对前后端都不熟，接触过图形，游戏也是第九艺术嘛，玩过点3A,吃鸡,MMORPG）\n  4.学校里面教图形吗？（不教，自学了点），本科同学里面有多少人研究图形游戏？（两百人大概两三个人）\n  5.有女朋友吗？（没），家里支持你来这个城市吗？（支持）\n  6.必问问题：你有什么想问我的？(问一两个即可)\n总结\n  图形学相关的问题又多又杂，除了最基本的理论，还会和项目，游戏引擎，优化等结合。没有项目经验只能通过做题来勉强弥补一下。计算机基础知识除了算法和数据结构之外都不需要花太多功夫，c++的特性需要有较深入的理解。\n","plink":"http://Ssssshinji.github.io/2020/06/27/面试经验汇总/"},{"title":"问题1：节点间通路","date":"2020-06-27T07:39:32.000Z","date_formatted":{"ll":"Jun 27, 2020","L":"06/27/2020","MM-DD":"06-27"},"updated":"2020-06-27T09:01:47.972Z","content":"题目描述\n  给定有向图，设计一个算法，找出两个节点之间是否存在一条路径（提示在页尾）\n个人思路\n  题目含义很明确，就是让手写DFS和BFS。而对于寻找路径来说，BFS是更好的选择。\n个人解答\n1太久没写我居然写不出来BFS，很难受。\n题目解析\n  -无解析\n标准解答（BFS）\n12345678910111213141516171819202122232425static bool Search(Graph g,Vertex start, Vertex end)&#123;            if(start &#x3D;&#x3D; end)return true;            foreach(Vertex v in g.GetVertexs())&#123;                v.state &#x3D; State.Unvisited;            &#125;            Queue&lt;Vertex&gt; q &#x3D; new Queue&lt;Vertex&gt;();            start.State &#x3D; State.Visiting;            q.Enqueue(start);            while(q.Count !&#x3D; 0)&#123;                Node u &#x3D; q.Dequeue();                if(u !&#x3D; null)&#123;                    foreach(Vertex v in u.GetAdjacent())&#123;                        if(v.state &#x3D;&#x3D; State.Unvisited)&#123;                            if(v &#x3D;&#x3D; end)return true;                            else&#123;                                v.state &#x3D; State.Visiting;                                q.Enqueue(v);                            &#125;                        &#125;                    &#125;                    u.state &#x3D; State.Visted;                &#125;            &#125;            return false;        &#125;\n复杂度分析\n  如果是单链表实现的队列，其入队时间复杂度为O(n),出队为O(1)。这段代码的时间复杂度为O(n)。双链表则为O(1)。\n反思\n  基础知识不扎实，越是耳熟能详的算法越要自己亲手实现过才算是真正掌握了。\n提示\n  -有两个众所周知的算法可以做到这一点，其利弊是什么？\n","plink":"http://Ssssshinji.github.io/2020/06/27/问题1：节点间通路/"},{"title":"求职岗位调研（渲染相关）","date":"2020-06-26T14:47:36.000Z","date_formatted":{"ll":"Jun 26, 2020","L":"06/26/2020","MM-DD":"06-26"},"updated":"2020-06-26T16:59:18.975Z","content":"字节跳动相关职位\n渲染引擎研发工程师-抖音/抖音火山版/直播\n职位描述\n  1.参与开发面向移动端的特效引擎项目；\n  2.参与特效引擎的核心模块开发；\n  3.支持特效业务的实现和落地；\n  4.支持特效工具链的建设。\n职业要求\n  1.图像处理或图形学相关专业或主修过相关课程，2021届获得本科及以上学历；\n  2.熟练掌握C++，熟悉C11标准相关特性；\n  3.熟悉图形开发相关技术（OPENGL，DirectX，METAL，VULCAN）和GPU架构优先；\n  4.有商业引擎的实践经验优先，如：Unity，UE，CryEngine, GamePlay3D等；\n  5.对技术有极大的热情，学习能力强，责任心强，工作认真细致，具备良好的服务意识，具有良好的团队沟通与协作能力。\n\n游戏引擎开发工程师\n职位描述\n  1.参与引擎和游戏基础组件和工具的研发；\n  2.帮助项目组解决引擎，组件和工具问题；\n  3.帮助项目组研究解决方案，优化性能问题。\n职业要求\n  1.大学本科及以上学历，计算机软件专业或数学专业优先，2021年毕业；\n  2.至少熟练掌握一⻔计算机语言；\n  3.计算机基础素养优秀，熟悉语言，数据结构，操作系统，计算机网络等；\n  4.熟悉Unity或Unreal引擎，熟悉计算机图形学，熟悉Shader开发；\n  5.有较强的学习能力，能够熟练阅读英文技术文档，具有较强的分析与解决问题能力；\n  6.熟悉OpenGL、DirectX、Metal或Vulkan等技术的优先；\n  7.熟悉移动端开发经验者优先；\n\n游戏技术美术-游戏业务\n职位描述\n  1.成为国内一流游戏研发团队的一员，和国内顶级的研发团队一起工作，完成挑战；\n  2.研究业界领先的渲染,物理，动画等技术，与美术大牛一起推动各种新技术在项目中应用落地；\n  3.探索游戏行业先进的技术和工具，完善项目的内容制作流程与内容生产管线，不断完善游戏的开发效率和品质体验；\n  4.针对各个软硬件平台进行游戏性能和表现的极致优化；\n  5.提取项目中的最佳实践，推动优秀技术方案的普及和广泛应用。\n职业要求\n  1.大学本科及以上学历，2021年毕业；\n  2.熟悉shader，能制作符合美术需求的shader，有shader性能优化经验；\n  3.有良好的审美和逻辑思维能力，具备独立解决美术向技术问题的能力；\n  4.积极主动，能承受一定的工作压力，对游戏开发充满热情。\n以下是加分项\n  5.热爱：热爱游戏，体验过大量且多种类型游戏，对游戏制作拥有极大热情；\n  6.技术：熟悉一款主流美术软件3dMax、Maya、Zbrush、Substance Painter等，熟悉Unity、Unreal等主流商业引擎；\n  7.奖项：在GameJam比赛中斩获过奖项；\n  8.积累：有自己的技术博客、开源项目者，有过海外留学经历者，或有游戏公司实习经验。\n\n完美世界相关职位\n游戏技术美术工程师\n职位描述\n  1.负责引擎相关工具的开发与维护；\n  2.根据美术需求编写相关shader；\n  3.对美术工作中遇到的问题提供技术支持；\n  4.制定美术资源制作规范；\n  5.优化效率，了解相关性能分析工具。\n岗位要求\n  1.热爱生活、热爱游戏，对玩游戏和做游戏充满激情，并渴望做出成功的游戏；\n  2.熟练掌握C#语言，了解或者熟悉MaxScript、JavaScript、Python；\n  3.熟悉计算机图形渲染管线和基础知识；能根据需求独立编写shader；\n  4.了解3D美术相关工具，包括：3DMax、Substance Painter、Photoshop等；\n  5.熟悉Unity3D相关知识，有实际开发经验者优先考虑。\n\n引擎开发程师\n职位描述\n  1.负责3D游戏引擎和工具的开发；\n  2.对渲染关技术进行前瞻性研究；\n  3.负责引擎的改进和维护工作。\n岗位要求\n  1.熟练掌握C++知识与多线程技术 ；\n  2.熟练掌握3D数学、渲染相关算法与数据结构 ；\n  3.掌握D3D或OpenGL渲染管线流程 ；\n  4.掌握图形API和Shader语言（D3D hlsl 或 OpenGL glsl）；\n  5.有性能优先的开发思路，懂得基本的代码优化技巧；\n  6.独立思考和分析能力，面对复杂问题能够快速找到答案 ；\n  7. 熟练的沟通与表达能力，有团队合作精神 。\n\n巨人网络\n游戏引擎开发工程师\n职位描述\n  1.负责3D引擎的相关开发，如场景管理，人物动画，特效，SHADER，动作融合，粒子等;\n  2.负责游戏美术相关插件编写；\n  3.负责引擎相关工具开发，优化3D引擎的性能。\n岗位要求\n  1.计算机基础知识扎实，有一定的编程经验；\n  2.熟悉C++、STL及各种设计模式,熟悉各种数据结构和算法；\n  3.熟悉3D图形学原理,熟悉3d图形的常用技术,有较强的数学功底；\n  4.熟悉HLSL,Shader编写；\n  5.具备良好的逻辑思维、综合分析能力，以及团队协作能力。有主动学习的能力和意愿，对技术研究有热情;\n  6.硕士及以上学历，计算机或相关专业。\n\nIGG\n高级技术美术\n职位描述\n  1.和美术人员、引擎程序员一起设计渲染方案，负责Shader编写，实现优秀的美术效果\n  2.充分全面了解美术流程各环节的需求和问题，及时高质量地提供开发工具，技术指导和解决方案；\n  3.制定美术资源规范，监督项目人员规范执行；\n  4.对游戏性能进行Profiling，设计优化方案；\n岗位要求\n  1.熟悉计算机图形学，包括图形管线及图形API，着色器语言，有渲染器设计经验者加分；\n  2.熟练精通Unity游戏引擎，有Unreal或其他商业游戏引擎经验者加分；\n  3.熟悉编程和脚本语言：Maxscript, Mel, Python至少一项，C#/C++至少一项，有美术软件工具集或引擎开发经验者加分；\n  4.熟悉常用美术工具，如Max/Maya，Photoshop，Substance，ZBrush等，并具备较好的审美能力和美术功底；\n  5.熟悉常用的PC及移动端Profiling工具，GPA，Renderdoc，Nsight，SnapdragonProfiler等；\n  6.良好的沟通交流能力，工作积极主动，能承受一定的工作压力，有英文交流能力者加分；\n  7.8+年游戏开发经验，5+年技术美术相关经验，具备次世代游戏项目开发经验者加分。\n分析及总结\n  渲染相关的工作大致分为两种，第一个方向是研发引擎类，该类除了图形学的技术，还重视个人的编程能力和计算机基础知识（尤其是数据结构）的扎实程度。作为应对，刷题是一个很好的选择。另一个方向是技美，该类稍微放宽了计算机基础知识及编程能力的门槛，但相对的，需要对shader有更好的掌握，并且至少熟悉一种商业3D软件，同时对美术素养也有一定要求。平时自己制作shader和捏人对这方面是个不错的锻炼。\n  可以选择的有各个游戏公司（技美），视频处理相关的公司（渲染引擎研发），想研发自己渲染/游戏引擎的公司。总的来说，就职范围不广，市场需求较少，且要求较高。感觉基本是凉了\n  1.\n  2.\n  3.\n  4.对游戏性能进行Profiling，设计优化方案；\n  5.\n  6.\n  7.\n","plink":"http://Ssssshinji.github.io/2020/06/26/求职岗位调研（渲染相关）/"},{"title":"问题1：移除重复节点","date":"2020-06-26T13:27:58.000Z","date_formatted":{"ll":"Jun 26, 2020","L":"06/26/2020","MM-DD":"06-26"},"updated":"2020-06-27T07:43:33.887Z","content":"题目描述\n  编写代码，移除未排序链表中的重复节点。进阶：如果不得使用临时缓冲区，该怎么解决？（提示在页尾）\n个人思路\n  新建一个字典(dictionary)，依次把每个节点的value当作键添加到字典中，字典的值随便取。每次碰到新节点时先调用CintainsKey(key)方法，因为字典中键的唯一性，返回true时说明该节点重复。不使用缓冲区不会做。\n个人解答\n123456789101112void deleteDups(LinkedListNode node)&#123;    Dictionary&lt;key,value&gt; dic &#x3D; new Dictionary&lt;key,value&gt;();    LinkedListNode previous &#x3D; null;    while(node !&#x3D; null)&#123;        if(dic.ContainsKey(node.value))&#123;            previous.Next &#x3D; node.next;        &#125; else &#123;            dic.Add(node.value);            previous &#x3D; node;        &#125;    node.next;    &#125;\n题目解析\n  -要想移除链表中的重复节点，需要设法记录有哪些是重复的。这里只要用到一个简单的散列表。\n标准解答\n12345678910111213void deleteDups(LinkedListNode node)&#123;    HashSet&lt;item&gt; set &#x3D; new HashSet&lt;item&gt;();    LinkedListNode previous &#x3D; null;    while(node !&#x3D; null)&#123;        if(set.Contains(node.value))&#123;            previous.Next &#x3D; node.next;        &#125; else &#123;            set.Add(node.value);            previous &#x3D; node;        &#125;    node.next;    &#125; &#125;\n复杂度分析\n  这段代码的时间复杂度为O(n),n为链表节点数目。\n不使用临时缓冲区的情况\n  如果不使用额外的缓冲区，可以使用两个指针来迭代：current迭代访问整个链表，runner用于检查后续的节点时候重复。\n标准解答（不使用临时缓冲区）\n1234567891011121314void deleteDups(LinkedListNode head)&#123;    LinkedListNode current &#x3D; head;    while(current !&#x3D; null)&#123;        LinkedListNode runner &#x3D; current;        while(runner.next !&#x3D; null)&#123;            if(current.value &#x3D;&#x3D; runner.next.value)&#123;                runner.next &#x3D; runner.next.next;            &#125;            else&#123;                runner &#x3D; runner.next;            &#125;        &#125;        current &#x3D; current.next;    &#125;\n复杂度分析\n  这段代码的空间复杂度为O(1)，但时间复杂度为O(N^2)。\n反思\n  第一问基本思路相同，刚好复习一下dictionary和hashSet的区别。对于不使用缓冲区的情况，老想着怎么样轻易解决，却忘了大部分算法都是先用最简单的方式得出结果再慢慢优化的，忽略了双指针循环。\n提示\n  -你有没有试过一个散列表？你应该可以通过一次链表遍历做到这一点。\n  -没有额外的空间，你需要O(N^2)的时间。尝试使用两个指针，其中第二个指针在第一个指针之前搜索。\n","plink":"http://Ssssshinji.github.io/2020/06/26/问题1：移除重复节点/"},{"title":"问题1：判定字符是否唯一","date":"2020-06-25T07:36:02.000Z","date_formatted":{"ll":"Jun 25, 2020","L":"06/25/2020","MM-DD":"06-25"},"updated":"2020-06-25T09:16:33.958Z","content":"题目描述\n  实现一个算法，确定一个字符串的所有字符是否不全都不同。假使不允许使用额外的数据结构，又该如何处理？（提示在页尾）\n个人思路\n  如果可用其他的数据结构，创建一个list，逐个将字符加入到list中。在加入前调用List.Contains()查询是否已经有该字符，有则报错。如果不可用别的数据结构，按照ASCII码排序，再看是否有相邻字符相等，或者拿每一个和剩下的字符比较。\n个人解答（使用数据结构）\n1234567891011121314151617Boolean isUnique(string str)&#123;    ArrayList list &#x3D; new ArrayList();    for (int i &#x3D; 0; i &lt; str.Length; i++)    &#123;        if (!list.Contains(str[i]))        &#123;            list.Add(str[i]);        &#125;        else        &#123;            return false;        &#125;    &#125;    return true;&#125;\n题目解析\n  -要关注字符串是ASCII串还是Unicode串，这关系到你需要使用的数组大小（在标准解答中，按照ASCII处理）\n  -如果字符串长度超过了字母表中不同字符的个数(ASCII:128)，直接返回false\n标准解答（使用数据结构）\n1234567891011121314Boolean isUnique(string str)&#123;    if(str.Length &gt; 128)return false;    bool[] char_set &#x3D; new bool[128];    for(int i &#x3D; 0; i &lt; str.Length; i++)&#123;        int val &#x3D; str[i];        &#x2F;&#x2F;在字符串中已找到过        if(char_set[val])&#123;            return false;        &#125;        char_set[val] &#x3D; true;    &#125;    return true;&#125;\n复杂度分析\n  这段代码的时间复杂度为O(n)，其中n为字符串长度。空间复杂度为O(1)。你也可以认为时间复杂度是O(1)，因为for循环的迭代永远不会超过128次。如果不想假设字符集是恒定的，也可以认为空间复杂度是O(c )，时间复杂度是O(min(c,n))或者O(c )，其中c是字符集的大小。\n不使用数据结构的情况\n  思路和自己的思路相同，无代码解析。\n反思\n  没有注意到字符数量是有限的，从而利用数组解决问题。类似的使用数组的方式还有很多，需要注意。\n提示\n  -用散列表试试\n  -位向量有用吗\n  -你能用O(NlogN)的时间复杂度解决它吗\n","plink":"http://Ssssshinji.github.io/2020/06/25/问题1：判定字符是否唯一/"},{"title":"算法常见面试题1-5","date":"2020-06-24T13:14:39.000Z","date_formatted":{"ll":"Jun 24, 2020","L":"06/24/2020","MM-DD":"06-24"},"updated":"2020-06-25T07:42:03.548Z","content":"\n1.算法的几个特征是什么？\n  1.有穷性 (Finiteness) 指算法必须在执行有限个步骤之后终止。\n  2.确切性 (Definiteness) 算法的每一步骤必须有确切的定义。\n  3.输入项 (Input) 一个算法有0个或者多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出了初始条件。\n  4.输出项 (Output) 一个算法有一个或者多个输出，以反映对输入数据加工后的结果。没有输出的算法毫无意义。\n  5.可行性 (Effectiveness) 算法中执行的任何计算步骤都可以被分解为基本的可执行操作，即每个计算步骤都可以在有限时间内完成，也称之为有效性。\n2.算法复杂性的定义。大O、θ、Ω、小o分别表示的含义是什么？\n  算法复杂度分为空间复杂度S(n)和时间复杂度T(n)。\n  空间复杂度指在运行过程中为局部变量分配的存储空间的大小，它包括参数列表中的形参变量和函数体中定义的局部变量两个部分，记作S(n) = O(f(n))。时间复杂度定性描述了该算法的运行时间，记作T(n) = O(f(n))。\n  如果算法A需要的时间与f(n)成正比，则称算法A为f(n)阶，记为O(f(n))。函数f(n)称为算法的增率函数(growth-rate function)。该表示法使用大学字母O(Order)来表示，故称为大O表示法。若规模为n的问题需要的时间与n成正比，则问题表示为O(n),即n阶。若需要的时间与\\(n^2\\)成正比，则问题表示为O(\\(n^2\\)),以此类推。**O并不是一个函数。**他的属性有：\n  1.可忽略算法增率函数的低阶项\n  2.可忽略算法增率函数中高阶项的倍输常量\n  3.O(f(n)) + O(g(n))=O(f(n)+g(n))可组合增率函数\n  形式化定义：\n  给定2个正值函数f和g，定义：f(n) = O(g(n)),条件为：存在正实数c和N，使得对于所有的n\\(\\ge\\)N,有|f(n)|\\(\\le\\)|cg(n)|。上述的定义表明，当n足够大，大过一个特定的N时，且存在一个正数c，使得|f(n)|不大于|cg(n)|,则f是g的O表示。关系可以解释为g(n)是f(n)的一个上界，也可以理解为f增长的速度最多和g一样快，而不会超过g。\n\n\n名称\n表示法\n定义\n\n\n\n\nTilde\nf(n)~g(n)\n$$ \\lim_{x \\to \\infty} \\frac{f(n)}{g(n)} = 1$$\n\n\nBig Oh\nf(n) is O(g(n))\n$$\\exists c \\gt 0, n_0 \\ge 0$$such that \\( 0 \\le f(n) \\le c \\cdot g(n)\\) for all \\(n \\ge n_0\\)\n\n\nBig Omega\nf(n) is \\(\\Omega\\)(g(n))\ng(n) is O(f(n))\n\n\nBig Theta\nf(n) is \\(\\Theta\\)(g(n))\nf(n) is both O(g(n)) and \\(\\Omega\\)(g(n))\n\n\nLittle oh\nf(n) is o(g(n))\n$$ \\lim_{x \\to \\infty} \\frac{f(n)}{g(n)} = 0$$\n\n\nLittle omega\nf(n) is \\(\\omega\\)(g(n))\ng(n) is o(f(n))\n\n\n3.递归算法的定义，及其两要素。\n  递归就是循环定义，对于一个方法来说，就是自己调用自己。\n  两要素：\n  -终止条件\n  -递推公式\n  经典汉诺塔问题(c#实现)\n1234567891011121314151617181920212223using System;namespace Hanoi_Tower&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            int n &#x3D; Int32.Parse(Console.ReadLine());            Hanoi(n,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);        &#125;        private static void Hanoi(int n, string a,string b, string c)&#123;            if(n &#x3D;&#x3D; 1)Move(a,c);            else &#123;                Hanoi(n-1, a, c, b);                Move(a,c);                Hanoi(n-1, b, a, c);            &#125;        &#125;        private static void Move(string origin, string des)&#123;            Console.WriteLine(origin+ &quot;---&gt;&quot; + des);        &#125;    &#125;&#125;\n4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。\n","plink":"http://Ssssshinji.github.io/2020/06/24/算法常见面试题1-5/"},{"title":"图片测试","date":"2020-06-20T11:53:43.000Z","date_formatted":{"ll":"Jun 20, 2020","L":"06/20/2020","MM-DD":"06-20"},"updated":"2020-06-24T10:50:10.571Z","content":"\n","plink":"http://Ssssshinji.github.io/2020/06/20/image/"},{"title":"幸运星 第一话（外链视频测试）","date":"2020-06-20T09:32:57.000Z","date_formatted":{"ll":"Jun 20, 2020","L":"06/20/2020","MM-DD":"06-20"},"updated":"2020-06-24T12:33:37.079Z","content":"\n \n\n","plink":"http://Ssssshinji.github.io/2020/06/20/video/"}]