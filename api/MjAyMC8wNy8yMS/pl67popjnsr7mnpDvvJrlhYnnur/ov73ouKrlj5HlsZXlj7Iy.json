{"title":"问题精析：光线追踪发展史2","date":"2020-07-21T15:50:10.000Z","date_formatted":{"ll":"Jul 21, 2020","L":"07/21/2020","MM-DD":"07-21"},"link":"2020/07/21/问题精析：光线追踪发展史2","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-21T16:13:37.503Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<h2 id=\"whitted-raytrace\">Whitted RayTrace<a title=\"#whitted-raytrace\" href=\"#whitted-raytrace\"></a></h2>\n<p>  1980年，Whitted ,Kay和Greenberg 提出了使用递归的光线追踪来描绘准确的折射和反射。<br>\n  光线投射渲染的进化发生在1979年，当时Turner Whitted通过引入反射，折射和阴影来延长光线投射过程从而形成自身的Whitted光线追踪。<br>\n<img src=\"https://picb.zhimg.com/80/v2-c0986477f3d29430f771d6d2d1c16732_720w.jpg\" alt=\"\"><br>\n  在当时它得到的那张512x512的渲染图耗时74分钟，而今天则只需要几秒钟就可以完成。<br>\n<img src=\"https://picb.zhimg.com/80/v2-dfdc3d979e6c9e4b72c1c630344193ab_720w.jpg\" alt=\"\"><br>\n  大致上，Whitted RayTrace其主要把光线分为四种<br>\n  1.视角光线，和之前的一样，没什么好说的。<br>\n  2.反射光线。在表面沿镜面反射方向继续照射。反射的颜色由反射光线与场景中的对象的交点决定。<br>\n  3.折射光线，其创建与反射光线类似，只是它的方向是进入对象并最终可以退出对象。<br>\n  4.阴影光线，是通过创建从交点到所有灯光的阴影光线来计算的。如果阴影光线在到达灯光之前与某个对象相交，则该交点将从该特定灯光中阴影显示。<br>\n  Whitted 光线追踪主要解决了场景中没有间接光的问题，但是它解决的也相当的一般，因为它所有的间接光都只来源于完美的镜面反射或者是折射，这种材质显然在现实世界中并不常见，对于大多数的间接光基本无法模拟，这也是由于它对每一个EyeRay 的交点只发出一条的Reflected ray和Refracted ray。这个问题将在分布式光线追踪中有所改善。</p>\n<h3 id=\"光线追踪的类型\">光线追踪的类型<a title=\"#光线追踪的类型\" href=\"#光线追踪的类型\"></a></h3>\n<p>  <strong>前向光线追踪 Forward Ray Tracing</strong>:前向光线追踪遵循光子从光源到物体。虽然前向光线可以最准确地确定每个物体的颜色，但效率非常低。这是因为来自光源的许多光线永远不会通过视平面并进入眼睛。追踪来自光源的每条光线意味着许多光线将被浪费掉，因为它们从未对从眼睛看.（这里的前向后向可能每个人理解不同而相反，这里指的是Light Ray Tracing）<br>\n<img src=\"https://pic2.zhimg.com/80/v2-1fc7c97e0b9e137b9bd0c155c8c67e40_720w.jpg\" alt=\"\"><br>\n  <strong>向后光线追踪 Backward Ray Tracing</strong>:为了使光线追踪更有效，引入了后向光线追踪方法。在后向光线中，在眼睛处产生眼睛光线; 它通过视平面并进入世界。射线击中的第一个物体是从视平面的那个点可见的物体。<br>\n  后向光线的缺点是它假设只有通过视平面并进入眼睛的光线对场景的最终图像有贡献。在某些情况下，这种假设是有缺陷的。例如，如果一个透镜被固定在桌子顶部的一个距离处，并且被正上方的光源照亮，那么在透镜下面会有一个具有大光浓度的焦点。如果反向光线追踪试图重新创建此图像，则会计算错误，因为向后发射光线只会确认光线通过透镜；反向光线无法识别通过透镜的正向光线弯曲。因此，如果只进行反向光线追踪，透镜下方将只有一个均匀的光斑，就像透镜是一块普通的玻璃。<br>\n  如上所述，有效且最容易实现性能优化的一种方法是从眼睛向后发射光线，而不是从光源光发射线。通过这种方式，不会浪费计算能力来从未击中模型或相机的光线。<br>\n<img src=\"https://pic4.zhimg.com/80/v2-c30708d7b54b6defd6c6cfd56a4b0584_720w.jpg\" alt=\"\"><br>\n  <strong>混合光线追踪</strong>:由于前向光线追踪和后向光线追踪都有其缺点，最近的研究试图开发出会影响速度和精度的混合解决方案。在这些混合解决方案中，仅执行某些级别的前向射线。算法记录数据，然后继续执行后向光线追踪。场景的最终着色将后向光线和前向光线计算都考虑在内。<br>\n  Veach（1995）发明出了后向光线追踪+前向光线追踪+连接线（Bidirectional Path Tracing）的混合方法，这在后面会讲解。综上，而我们的whitted光线追踪一般而言都时使用的向后渲染的方式来进行的（从眼睛发射光线）。</p>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://zhuanlan.zhihu.com/p/72673165\" target=\"_blank\">光线追踪</a><br>\n   2. [《Real-Time Rendering 3rd》 提炼总结]</p>\n","prev":{"title":"问题2：栈的最小值","link":"2020/07/22/问题2：栈的最小值"},"next":{"title":"问题精析：光线追踪发展史","link":"2020/07/21/问题精析：光线追踪发展史"},"plink":"http://Ssssshinji.github.io/2020/07/21/问题精析：光线追踪发展史2/","toc":[{"id":"whitted-raytrace","title":"Whitted RayTrace","index":"1","children":[{"id":"光线追踪的类型","title":"光线追踪的类型","index":"1.1"}]},{"id":"参考资料","title":"参考资料","index":"2"}]}