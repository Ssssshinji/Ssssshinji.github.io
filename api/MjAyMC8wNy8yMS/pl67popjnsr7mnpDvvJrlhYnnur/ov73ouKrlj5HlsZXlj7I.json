{"title":"问题精析：光线追踪发展史","date":"2020-07-21T08:47:13.000Z","date_formatted":{"ll":"Jul 21, 2020","L":"07/21/2020","MM-DD":"07-21"},"link":"2020/07/21/问题精析：光线追踪发展史","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-21T15:52:49.282Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<h2 id=\"ray-casting.\">Ray Casting.<a title=\"#ray-casting.\" href=\"#ray-casting.\"></a></h2>\n<p>  Ray Casting.1968年，Arthur Appel。<br>\n  第一个用于渲染的光线投射算法最初由Arthur Appel在1968年引入。光线投射通过从观察点对每一个像素发射一条光线并找到在世界场景中阻挡光线路径的最近物体来渲染场景，raycasting只有两种射线，第一种是眼睛发射的eye射线，来寻找场景中的交点，另一个是从交点发到灯光的阴影射线，看自身是否是处于阴影当中。 与传统扫描线渲染算法相比，光线投射的一个显着优点是能够处理不平整的表面和固体。 电子世界争霸战（1982年电影Tron Series）的大部分动画都是使用光线投射技术渲染的。<br>\n  早年间光栅化技术还未流行时，也会用于游戏当中。最著名的一款光线投射的游戏是Wolfenstein 3D。接下来将介绍不论在光线追踪还是光线投射算法中都通用的公共部分，避免之后的内容太过的庞杂。</p>\n<h3 id=\"光线投射基本算法\">光线投射基本算法<a title=\"#光线投射基本算法\" href=\"#光线投射基本算法\"></a></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Render()</span><br><span class=\"line\">    for each pixel x,y</span><br><span class=\"line\">    color(pixel) &#x3D; trace(ray_through_pixel(x,y))</span><br></pre></td></tr></table></figure>\n<p>  首先做的就是创建光线，得到每一个点的光线数据结构，之后开始Trace，这里使用Trace这个函数名是为了和后面统一。是指在场景中追踪这个光线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trace()</span><br><span class=\"line\">    object_point &#x3D; Closest_intersection(ray)</span><br><span class=\"line\">    if object_point return Shade(object_point,ray)</span><br><span class=\"line\">    else return Background_Color</span><br></pre></td></tr></table></figure>\n<p>  我们在场景中寻找光线与场景中的物体是否有交点，并返回距离我们最近的那一个object的信息，如果找到，我们进行着色如果没找到我们返回设定的背景颜色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closest_intersection(ray)</span><br><span class=\"line\">    for each surface in scene</span><br><span class=\"line\">        calc_intersection(ray, surface)</span><br><span class=\"line\">    return the closest point of intersection to viewer</span><br></pre></td></tr></table></figure>\n<p>  在光线投射的Closest_intersection中，我们并不需要额外的返回其他的复杂信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shade(point, ray) </span><br><span class=\"line\">  to calculate contributions of each light source</span><br></pre></td></tr></table></figure>\n<h3 id=\"光线的表示和求交问题\">光线的表示和求交问题<a title=\"#光线的表示和求交问题\" href=\"#光线的表示和求交问题\"></a></h3>\n<p>  不论对于哪种的光线渲染算法，第一步都是进行从相机进行光线投射，其最终的目的就是找到屏幕中的每一个像素对应的光线的方向。<br>\n<img src=\"https://picb.zhimg.com/80/v2-9ccb63a0469956168600a904cd7575fc_720w.jpg\" alt=\"\"><br>\n  在这里，对于局部、世界、相机空间的转换关系是和光栅化渲染中的空间转换的做法基本类似，所以在这里就不进行赘述。<br>\n  大多数情况下，我们使用\\(p(t) = e + t(s - e)\\)的方法来进行光线的表示，e是我们设定的相机观察点，而s是画布上的点，通常我们渲染之前预先设定的长宽，然后我们通过参数t来表示光线的长度。<br>\n  1.当t为0，表示原点<br>\n  2.当t为正数代表指向屏幕<br>\n  3.当t为负数代表在原点后面<br>\n  4.如果t1&lt; t2,代表t1离我们更近</p>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://zhuanlan.zhihu.com/p/72673165\" target=\"_blank\">光线追踪</a><br>\n   2. [《Real-Time Rendering 3rd》 提炼总结]</p>\n","prev":{"title":"问题精析：光线追踪发展史2","link":"2020/07/21/问题精析：光线追踪发展史2"},"next":{"title":"问题7：旋转矩阵","link":"2020/07/21/问题7：旋转矩阵"},"plink":"http://Ssssshinji.github.io/2020/07/21/问题精析：光线追踪发展史/","toc":[{"id":"ray-casting.","title":"Ray Casting.","index":"1","children":[{"id":"光线投射基本算法","title":"光线投射基本算法","index":"1.1"},{"id":"光线的表示和求交问题","title":"光线的表示和求交问题","index":"1.2"}]},{"id":"参考资料","title":"参考资料","index":"2"}]}