{"title":"问题精析：OpenGL：VAO和VBO","date":"2020-07-14T17:40:15.000Z","date_formatted":{"ll":"Jul 15, 2020","L":"07/15/2020","MM-DD":"07-15"},"link":"2020/07/15/问题精析：OpenGL：VAO和VBO","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-14T17:51:34.290Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<h2 id=\"顶点输入和vbo\">顶点输入和VBO<a title=\"#顶点输入和vbo\" href=\"#顶点输入和vbo\"></a></h2>\n<p>  开始绘制图形之前，我们必须先给OpenGL输入一些顶点数据。OpenGL是一个3D图形库，所以我们在OpenGL中指定的所有坐标都是3D坐标（x、y和z）。OpenGL不是简单地把所有的3D坐标变换为屏幕上的2D像素；OpenGL仅当3D坐标在3个轴（x、y和z）上都为-1.0到1.0的范围内时才处理它。所有在所谓的标准化设备坐标(Normalized Device Coordinates)范围内的坐标才会最终呈现在屏幕上（在这个范围以外的坐标都不会显示）。<br>\n  我们希望渲染一个三角形，我们一共要指定三个顶点，每个顶点都有一个3D位置。我们会将它们以标准化设备坐标的形式（OpenGL的可见区域）定义为一个float数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float vertices[] &#x3D; &#123;</span><br><span class=\"line\">    -0.5f, -0.5f, 0.0f,</span><br><span class=\"line\">     0.5f, -0.5f, 0.0f,</span><br><span class=\"line\">     0.0f,  0.5f, 0.0f</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>  定义这样的顶点数据以后，我们会把它作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。<br>\n  我们通过**顶点缓冲对象(Vertex Buffer Objects, VBO)**管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。<br>\n  顶点缓冲对象是我们在OpenGL教程中第一个出现的OpenGL对象。就像OpenGL中的其它对象一样，这个缓冲有一个独一无二的ID，所以我们可以使用glGenBuffers函数和一个缓冲ID生成一个VBO对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int VBO;</span><br><span class=\"line\">glGenBuffers(1, &amp;VBO);</span><br></pre></td></tr></table></figure>\n<p>  OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br></pre></td></tr></table></figure>\n<p>  glBufferData是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。第二个参数指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。第三个参数是我们希望发送的实际数据。<br>\n  第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：<br>\n  GL_STATIC_DRAW ：数据不会或几乎不会改变。<br>\n  GL_DYNAMIC_DRAW：数据会被改变很多。<br>\n  GL_STREAM_DRAW ：数据每次绘制时都会改变。<br>\n  现在我们已经把顶点数据储存在显卡的内存中，用VBO这个顶点缓冲对象管理。</p>\n<h2 id=\"vao\">VAO<a title=\"#vao\" href=\"#vao\"></a></h2>\n<p>  顶点数组对象(Vertex Array Object, VAO)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\n<blockquote>\n<p>OpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。</p>\n</blockquote>\n<p>  一个顶点数组对象会储存以下这些内容：<br>\n  glEnableVertexAttribArray和glDisableVertexAttribArray的调用。<br>\n  通过glVertexAttribPointer设置的顶点属性配置。<br>\n  通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。</p>\n<blockquote>\n<p>每个顶点属性从一个VBO管理的内存中获得它的数据，而具体是从哪个VBO（程序中可以有多个VBO）获取则是通过在调用glVertexAttribPointer时绑定到GL_ARRAY_BUFFER的VBO决定的。由于在调用glVertexAttribPointer之前绑定的是先前定义的VBO对象，顶点属性0现在会链接到它的顶点数据。</p>\n</blockquote>\n<p><img src=\"https://learnopengl-cn.github.io/img/01/04/vertex_array_objects.png\" alt=\"\"><br>\n  创建一个VAO和创建一个VBO很类似：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int VAO;</span><br><span class=\"line\">glGenVertexArrays(1, &amp;VAO);</span><br></pre></td></tr></table></figure>\n<p>  要想使用VAO，要做的只是使用glBindVertexArray绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span><br><span class=\"line\">&#x2F;&#x2F; 1. 绑定VAO</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">&#x2F;&#x2F; 2. 把顶点数组复制到缓冲中供OpenGL使用</span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">&#x2F;&#x2F; 3. 设置顶点属性指针</span><br><span class=\"line\">glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);</span><br><span class=\"line\">glEnableVertexAttribArray(0);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ..:: 绘制代码（渲染循环中） :: ..</span><br><span class=\"line\">&#x2F;&#x2F; 4. 绘制物体</span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, 0, 3);</span><br></pre></td></tr></table></figure>\n<p>  glDrawArrays函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它 <strong>（图元装配环节的）</strong>。第二个参数指定了顶点数组的起始索引，我们这里填0。最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</p>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/\" target=\"_blank\">你好，三角形</a></p>\n","next":{"title":"问题精析：Early-z","link":"2020/07/14/问题精析：Early-z"},"plink":"http://Ssssshinji.github.io/2020/07/15/问题精析：OpenGL：VAO和VBO/","toc":[{"id":"顶点输入和vbo","title":"顶点输入和VBO","index":"1"},{"id":"vao","title":"VAO","index":"2"},{"id":"参考资料","title":"参考资料","index":"3"}]}