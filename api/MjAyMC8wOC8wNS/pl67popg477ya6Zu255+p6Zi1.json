{"title":"问题8：零矩阵","date":"2020-08-04T16:15:19.000Z","date_formatted":{"ll":"Aug 5, 2020","L":"08/05/2020","MM-DD":"08-05"},"link":"2020/08/05/问题8：零矩阵","tags":["数组与字符串"],"categories":["算法练习"],"updated":"2020-08-05T07:19:57.143Z","content":"<h2 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h2>\n<p><font size=4>  编写一种算法，若M×N矩阵中某个元素为0，则将其所在的行与列清零。</font></p>\n<h2 id=\"个人思路\">个人思路<a title=\"#个人思路\" href=\"#个人思路\"></a></h2>\n<p>  行的清除很容易，直接遍历消除第二维数组；列的清楚也不难，仔细可以写出来。</p>\n<h2 id=\"个人解答\">个人解答<a title=\"#个人解答\" href=\"#个人解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;个人解答有误，后详述</span><br><span class=\"line\">    static void SetZeros(int[][] matrix)&#123;</span><br><span class=\"line\">        for(int i &#x3D; 0; i &lt; matrix.Length; i++)&#123;</span><br><span class=\"line\">            for(int j &#x3D; 0; j &lt; matrix[0].Length; j++)&#123;</span><br><span class=\"line\">                if(matrix[i][j] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                    for(int l &#x3D; 0; l &lt; matrix[0].Length;l++)&#123;</span><br><span class=\"line\">                        matrix[i][l] &#x3D; 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    for(int k &#x3D; 0;k &lt; matrix.Length;k++)&#123;</span><br><span class=\"line\">                        matrix[k][j] &#x3D; 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目解析\">题目解析<a title=\"#题目解析\" href=\"#题目解析\"></a></h2>\n<p>  乍一看，这个问题似乎显而易见，直接遍历整个矩阵，只要发现值为0的元素，就将其所在的行与列清零。不过这种方法存在陷阱：在读取被清零的行或列时，读到的尽是0，于是所在行与列都得变成0，很快，整个矩阵的所有元素都会变为0。<br>\n  避开这个陷阱的方法之一是，新建一个矩阵，标记0元素位置，然后，在第二次遍历矩阵时，将0元素所在行与列清零。这种做法的空间复杂度为O(MN)。<br>\n  真的需要占用O(MN)的空间吗？不是的。既然打算将整行和整列清为0，因此并不需要准确记录它是cell[2][4]（行2、列4），只需知道行2有个元素为0，列4有个元素为0。不管怎样，整行和整列都要清为0，又何必要记录0元素的确切位置？<br>\n  下面是这个算法的实现代码。这里用两个数组分别记录包含0元素的所有行和列。在这之后，若所在行或列标记为0，则将元素清为0。</p>\n<h2 id=\"标准解答\">标准解答<a title=\"#标准解答\" href=\"#标准解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void SetZeros(int[][] matrix)&#123;</span><br><span class=\"line\">    bool[] row &#x3D; new bool[matrix.Length];</span><br><span class=\"line\">    bool[] column &#x3D; new bool[matrix[0].Length];</span><br><span class=\"line\">    for(int i &#x3D; 0; i &lt; matrix.Length; i++)&#123;</span><br><span class=\"line\">        for(int j &#x3D; 0; j &lt; matrix[0].Length; j++)&#123;</span><br><span class=\"line\">            if(matrix[i][j] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                row[i] &#x3D; true;</span><br><span class=\"line\">                column[j] &#x3D; true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;置空行</span><br><span class=\"line\">    for(int i &#x3D; 0; i&lt;matrix.Length; i++)&#123;</span><br><span class=\"line\">        if(row[i])&#123;</span><br><span class=\"line\">            for(int j &#x3D; 0;j &lt; matrix[0].Length; j++)&#123;</span><br><span class=\"line\">                matrix[i][j] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;置空列</span><br><span class=\"line\">    for(int j &#x3D; 0; j&lt;matrix[0].Length; j++)&#123;</span><br><span class=\"line\">        if(column[j])&#123;</span><br><span class=\"line\">            for(int i &#x3D; 0;i &lt; matrix[0].Length; i++)&#123;</span><br><span class=\"line\">                matrix[i][j] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  为了提高空间利用率，可以选用位向量替代布尔数组。存储空间的复杂度仍然为O(N)。<br>\n  1.通过使用第一行替代row数组，第一列替代column数组，可以将算法的空间复杂度降为O(1)，其具体步骤如下。<br>\n  2.检查第一行和第一列是否存在0元素，并根据结果设置rowHasZero和columnHasZero的值（如果需要的话，稍后会将第一行和第一列清零）。<br>\n  3.遍历矩阵中的其余元素，如果matrix[i][0]为0，则将第i行清零。<br>\n  4.遍历矩阵中的其余元素，如果matrix[0][j]为0，则将第j行清零。<br>\n  5.根据第(1)步的结果，如果需要则将第一行和第一列清零。</p>\n<h2 id=\"标准解答-1\">标准解答<a title=\"#标准解答-1\" href=\"#标准解答-1\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void SetZeros(int[][] matrix)&#123;</span><br><span class=\"line\">    bool rowHasZero &#x3D; false;</span><br><span class=\"line\">    bool colHasZero &#x3D; false;</span><br><span class=\"line\">    &#x2F;&#x2F;检查第一行是否有零。</span><br><span class=\"line\">    for(int j &#x3D; 0; j &lt; matrix[0].Length;j++)&#123;</span><br><span class=\"line\">        if(matrix[0][j] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">            rowHasZero &#x3D; true;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;检查第一列</span><br><span class=\"line\">    for(int i &#x3D; 0; i &lt; matrix.Length;i++)&#123;</span><br><span class=\"line\">        if(matrix[i][0] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">            colHasZero &#x3D; true;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;检查其余元素</span><br><span class=\"line\">    for(int i &#x3D; 1; i &lt; matrix.Length; i++)&#123;</span><br><span class=\"line\">        for(int j &#x3D; 1; j &lt; matrix[0].Length;j++)&#123;</span><br><span class=\"line\">            if(matrix[i][j] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">                matrix[i][0] &#x3D; 0;</span><br><span class=\"line\">                matrix[0][j] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;根据第一列的值置空行</span><br><span class=\"line\">    for(int i &#x3D; 1; i &lt;matrix.Length;i++)&#123;</span><br><span class=\"line\">        if(matrix[i][0] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">            for(int j &#x3D; 0;j &lt; matrix[0].Length; j++)&#123;</span><br><span class=\"line\">                matrix[i][j] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int j &#x3D; 1; j&lt;matrix[0].Length;j++)&#123;</span><br><span class=\"line\">        if(matrix[0][j] &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">            for(int i &#x3D; 0;i &lt; matrix[0].Length; i++)&#123;</span><br><span class=\"line\">                matrix[i][j] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(rowHasZero)&#123;</span><br><span class=\"line\">        for(int j &#x3D; 0;j &lt; matrix[0].Length; j++)&#123;</span><br><span class=\"line\">            matrix[0][j] &#x3D; 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(colHasZero)&#123;</span><br><span class=\"line\">        for(int i &#x3D; 0;i &lt; matrix[0].Length; i++)&#123;</span><br><span class=\"line\">                matrix[i][0] &#x3D; 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  该段代码中很多部分都遵循如下解题思路：先对行进行某操作，再对列做同样的操作。在面试中，你可以通过添加注释与待完成（TODO）这样的标注来简化代码，以便于解释下一段代码与先前一段代码相同，只是操作对象为行。这样会让你专注于算法中最重要的部分。</p>\n<h2 id=\"反思\">反思<a title=\"#反思\" href=\"#反思\"></a></h2>\n<p>  一定要多测试才能发现代码里的问题，有些情况不是光思考就能想清楚的。</p>\n<h2 id=\"提示：#17，#74，#102\">提示：#17，#74，#102<a title=\"#提示：#17，#74，#102\" href=\"#提示：#17，#74，#102\"></a></h2>\n<p>  -如果你在找到0时清除了行和列，则可能会清理整个矩阵。在对矩阵进行任何更改之前，首先尝试找到所有的0。<br>\n  -你能只用额外的O(N)空间而不是O(N2)吗？在为0的单元格列表中你真正需要的是什么信息？<br>\n  -你可能需要一些数据存储来维护一个需要清零的行与列的列表。通过使用矩阵本身来存储数据，你是否可以把额外的空间占用减小到O(1)？</p>\n","prev":{"title":"问题9：字符串轮转","link":"2020/08/05/问题9：字符串轮转"},"next":{"title":"问题精析：反向运动学2","link":"2020/08/04/问题精析：反向运动学2"},"plink":"http://Ssssshinji.github.io/2020/08/05/问题8：零矩阵/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"个人思路","title":"个人思路","index":"2"},{"id":"个人解答","title":"个人解答","index":"3"},{"id":"题目解析","title":"题目解析","index":"4"},{"id":"标准解答","title":"标准解答","index":"5"},{"id":"标准解答-1","title":"标准解答","index":"6"},{"id":"反思","title":"反思","index":"7"},{"id":"提示：#17，#74，#102","title":"提示：#17，#74，#102","index":"8"}]}