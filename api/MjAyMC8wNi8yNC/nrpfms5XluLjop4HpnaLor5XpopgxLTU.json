{"title":"算法常见面试题1-5","date":"2020-06-24T13:14:39.000Z","date_formatted":{"ll":"Jun 24, 2020","L":"06/24/2020","MM-DD":"06-24"},"link":"2020/06/24/算法常见面试题1-5","updated":"2020-06-25T07:42:03.548Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<h2 id=\"1.算法的几个特征是什么？\">1.算法的几个特征是什么？<a title=\"#1.算法的几个特征是什么？\" href=\"#1.算法的几个特征是什么？\"></a></h2>\n<p>  1.有穷性 <em>(Finiteness)</em> 指算法必须在执行有限个步骤之后终止。<br>\n  2.确切性 <em>(Definiteness)</em> 算法的每一步骤必须有确切的定义。<br>\n  3.输入项 <em>(Input)</em> 一个算法有0个或者多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出了初始条件。<br>\n  4.输出项 <em>(Output)</em> 一个算法有一个或者多个输出，以反映对输入数据加工后的结果。<strong>没有输出的算法毫无意义。</strong><br>\n  5.可行性 <em>(Effectiveness)</em> 算法中执行的任何计算步骤都可以被分解为基本的可执行操作，<strong>即每个计算步骤都可以在有限时间内完成，也称之为有效性。</strong></p>\n<h2 id=\"2.算法复杂性的定义。大o、θ、ω、小o分别表示的含义是什么？\">2.算法复杂性的定义。大O、θ、Ω、小o分别表示的含义是什么？<a title=\"#2.算法复杂性的定义。大o、θ、ω、小o分别表示的含义是什么？\" href=\"#2.算法复杂性的定义。大o、θ、ω、小o分别表示的含义是什么？\"></a></h2>\n<p>  算法复杂度分为<strong>空间复杂度S(n)<strong>和</strong>时间复杂度T(n)。</strong><br>\n  空间复杂度指在运行过程中为<strong>局部变量</strong>分配的存储空间的大小，它包括参数列表中的形参变量和函数体中定义的局部变量两个部分，记作S(n) = O(f(n))。时间复杂度定性描述了该算法的运行时间，记作T(n) = O(f(n))。<br>\n  如果算法A需要的时间与f(n)成正比，则称算法A为f(n)阶，记为O(f(n))。函数f(n)称为算法的增率函数(growth-rate function)。该表示法使用大学字母O(Order)来表示，故称为大O表示法。若规模为n的问题需要的时间与n成正比，则问题表示为O(n),即n阶。若需要的时间与\\(n^2\\)成正比，则问题表示为O(\\(n^2\\)),以此类推。**O并不是一个函数。**他的属性有：<br>\n  1.可忽略算法增率函数的低阶项<br>\n  2.可忽略算法增率函数中高阶项的倍输常量<br>\n  3.O(f(n)) + O(g(n))=O(f(n)+g(n))可组合增率函数<br>\n  形式化定义：<br>\n  给定2个正值函数f和g，定义：f(n) = O(g(n)),条件为：存在正实数c和N，使得对于所有的n\\(\\ge\\)N,有|f(n)|\\(\\le\\)|cg(n)|。上述的定义表明，当n足够大，大过一个特定的N时，且存在一个正数c，使得|f(n)|不大于|cg(n)|,则f是g的O表示。关系可以解释为g(n)是f(n)的一个上界，也可以理解为f增长的速度最多和g一样快，而不会超过g。</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:center\">定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Tilde</td>\n<td style=\"text-align:center\">f(n)~g(n)</td>\n<td style=\"text-align:center\">$$ \\lim_{x \\to \\infty} \\frac{f(n)}{g(n)} = 1$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Big Oh</td>\n<td style=\"text-align:center\">f(n) is O(g(n))</td>\n<td style=\"text-align:center\">$$\\exists c \\gt 0, n_0 \\ge 0$$such that \\( 0 \\le f(n) \\le c \\cdot g(n)\\) for all \\(n \\ge n_0\\)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Big Omega</td>\n<td style=\"text-align:center\">f(n) is \\(\\Omega\\)(g(n))</td>\n<td style=\"text-align:center\">g(n) is O(f(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Big Theta</td>\n<td style=\"text-align:center\">f(n) is \\(\\Theta\\)(g(n))</td>\n<td style=\"text-align:center\">f(n) is both O(g(n)) and \\(\\Omega\\)(g(n))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Little oh</td>\n<td style=\"text-align:center\">f(n) is o(g(n))</td>\n<td style=\"text-align:center\">$$ \\lim_{x \\to \\infty} \\frac{f(n)}{g(n)} = 0$$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Little omega</td>\n<td style=\"text-align:center\">f(n) is \\(\\omega\\)(g(n))</td>\n<td style=\"text-align:center\">g(n) is o(f(n))</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"3.递归算法的定义，及其两要素。\">3.递归算法的定义，及其两要素。<a title=\"#3.递归算法的定义，及其两要素。\" href=\"#3.递归算法的定义，及其两要素。\"></a></h2>\n<p>  递归就是循环定义，对于一个方法来说，就是自己调用自己。<br>\n  两要素：<br>\n  -终止条件<br>\n  -递推公式<br><br>\n  <strong>经典汉诺塔问题(c#实现)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">namespace Hanoi_Tower</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int n &#x3D; Int32.Parse(Console.ReadLine());</span><br><span class=\"line\">            Hanoi(n,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private static void Hanoi(int n, string a,string b, string c)&#123;</span><br><span class=\"line\">            if(n &#x3D;&#x3D; 1)Move(a,c);</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                Hanoi(n-1, a, c, b);</span><br><span class=\"line\">                Move(a,c);</span><br><span class=\"line\">                Hanoi(n-1, b, a, c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private static void Move(string origin, string des)&#123;</span><br><span class=\"line\">            Console.WriteLine(origin+ &quot;---&gt;&quot; + des);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。\">4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。<a title=\"#4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。\" href=\"#4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。\"></a></h2>\n","prev":{"title":"问题1：判定字符是否唯一","link":"2020/06/25/问题1：判定字符是否唯一"},"next":{"title":"求职之前","link":"2020/06/24/求职之前"},"plink":"http://Ssssshinji.github.io/2020/06/24/算法常见面试题1-5/","toc":[{"id":"1.算法的几个特征是什么？","title":"1.算法的几个特征是什么？","index":"1"},{"id":"2.算法复杂性的定义。大o、θ、ω、小o分别表示的含义是什么？","title":"2.算法复杂性的定义。大O、θ、Ω、小o分别表示的含义是什么？","index":"2"},{"id":"3.递归算法的定义，及其两要素。","title":"3.递归算法的定义，及其两要素。","index":"3"},{"id":"4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。","title":"4.分治算法的思想，经典的分治算法(全排列、二分搜索、归并排序、快速排序、线性时间选择、最接近点对问题)。","index":"4"}]}