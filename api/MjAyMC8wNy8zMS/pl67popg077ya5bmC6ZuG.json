{"title":"问题4：幂集","date":"2020-07-31T09:52:34.000Z","date_formatted":{"ll":"Jul 31, 2020","L":"07/31/2020","MM-DD":"07-31"},"link":"2020/07/31/问题4：幂集","tags":["递归与动态规划"],"categories":["算法练习"],"updated":"2020-08-02T17:30:41.148Z","content":"<h2 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h2>\n<p><font size=4>  编写一种方法，返回某集合的所有子集。（提示在页尾）</font></p>\n<h2 id=\"个人思路\">个人思路<a title=\"#个人思路\" href=\"#个人思路\"></a></h2>\n<p>  两个数的子集如何得到三个数的子集？{},{a},{b},{a,b}。复制这些子集，每个都添加c，便得到了三个数的所有子集。由此可以得到递归式子。</p>\n<h2 id=\"个人解答\">个人解答<a title=\"#个人解答\" href=\"#个人解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写不对。</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目解析\">题目解析<a title=\"#题目解析\" href=\"#题目解析\"></a></h2>\n<p>  只要将上述步骤稍作一般化处理，就能产生一般情况的P(n)，先计算P(n-1)，复制一份结果，然后在每个复制后的集合中加入an。</p>\n<h2 id=\"标准解答\">标准解答<a title=\"#标准解答\" href=\"#标准解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static List&lt;List&lt;int&gt;&gt; PowerSet(List&lt;int&gt; set, int index)&#123;</span><br><span class=\"line\">    List&lt;List&lt;int&gt;&gt; allSets &#x3D; new List&lt;List&lt;int&gt;&gt;();</span><br><span class=\"line\">    &#x2F;&#x2F;遍历到没有元素，即只有空子集</span><br><span class=\"line\">    if(index &#x3D;&#x3D; set.Count)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;加入空集</span><br><span class=\"line\">        allSets.Add(new List&lt;int&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        allSets &#x3D; PowerSet(set,index + 1);</span><br><span class=\"line\">        List&lt;List&lt;int&gt;&gt; moreSets &#x3D; new List&lt;List&lt;int&gt;&gt;();</span><br><span class=\"line\">        foreach(List&lt;int&gt; list in allSets)&#123;</span><br><span class=\"line\">            List&lt;int&gt; newSets &#x3D; new List&lt;int&gt;();</span><br><span class=\"line\">            foreach(int i in list)&#123;</span><br><span class=\"line\">                newSets.Add(i);</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">            newSets.Add(set[index]);</span><br><span class=\"line\">            moreSets.Add(newSets);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach(List&lt;int&gt; list in moreSets)&#123;</span><br><span class=\"line\">            allSets.Add(list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach(List&lt;int&gt; l in allSets)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            foreach(int i in l)&#123;</span><br><span class=\"line\">                System.Console.Write(i + &quot;,&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.Console.WriteLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(allSets.Count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return allSets;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>解法2：组合数学（combinatorics）</strong><br>\n  尽管上面的解法没什么地方不对，不过还是可以另觅他法，解决这个问题。回想一下，在构造一个集合时，每个元素有两个选择：(1)该元素在这个集合中（yes状态），或者(2)该元素不在这个集合中（no状态）。这就意味着每个子集都是一串yes和no，比如yes, yes, no, no, yes, no。<br>\n  因此，总共可能会有2^n个子集。怎样才能迭代遍历所有元素的所有yes/no序列？如果将每个yes视作1，每个no视作0，那么，每个子集就可以表示为一个二进制串。<br>\n  接着，构造所有子集就等同于构造所有的二进制数（也即所有整数）。我们会迭代访问1到2n的所有数字，再将这些数字的二进制表示转换成集合。小事一桩！</p>\n<h2 id=\"标准解答（进阶）\">标准解答（进阶）<a title=\"#标准解答（进阶）\" href=\"#标准解答（进阶）\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static List&lt;List&lt;int&gt;&gt; PowerSet(List&lt;int&gt; set)&#123;</span><br><span class=\"line\">    List&lt;List&lt;int&gt;&gt; allSets &#x3D; new List&lt;List&lt;int&gt;&gt;();</span><br><span class=\"line\">    &#x2F;&#x2F;将1向左移Count个2，计算2^n，即总集合数</span><br><span class=\"line\">    int max &#x3D; 1&lt;&lt;set.Count;</span><br><span class=\"line\">    &#x2F;&#x2F; System.Console.WriteLine(max);</span><br><span class=\"line\">    for(int k &#x3D; 0; k &lt; max; k++)&#123;</span><br><span class=\"line\">        List&lt;int&gt; subset &#x3D; ConvertIntToSet(k,set);</span><br><span class=\"line\">        allSets.Add(subset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foreach(List&lt;int&gt; l in allSets)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        foreach(int i in l)&#123;</span><br><span class=\"line\">            System.Console.Write(i + &quot;,&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return allSets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">static List&lt;int&gt; ConvertIntToSet(int k, List&lt;int&gt; set)&#123;</span><br><span class=\"line\">    List&lt;int&gt; subset &#x3D; new List&lt;int&gt;();</span><br><span class=\"line\">    int index &#x3D; 0;</span><br><span class=\"line\">    for(int i &#x3D; k; i &gt; 0; i &gt;&gt;&#x3D; 1)&#123;</span><br><span class=\"line\">        if((i &amp; 1) &#x3D;&#x3D; 1)&#123;</span><br><span class=\"line\">            &#x2F;&#x2F; System.Console.WriteLine();</span><br><span class=\"line\">            subset.Add(set[index]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return subset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反思\">反思<a title=\"#反思\" href=\"#反思\"></a></h2>\n<p>  有的题里包含着数学规律，这道题中n个数的子集的个数为2^n。在找到规律后便可以利用巧妙的方式求解。</p>\n<h2 id=\"提示：#273，#290，#338，#354，#373\">提示：#273，#290，#338，#354，#373<a title=\"#提示：#273，#290，#338，#354，#373\" href=\"#提示：#273，#290，#338，#354，#373\"></a></h2>\n<p>  -如何从子集{a, b}中构建{a, b, c}的所有子集？<br>\n  -任何属于{a, b}的子集都是{a, b, c}的子集。哪个集合是{a, b, c}的子集却不是{a, b}的子集。<br>\n  -包含c的子集是{a, b, c}，而非{a, b}。你能使用子集{a, b}构建这些子集吗？<br>\n  -通过把c加到所有{a, b}的子集里，你可以构建剩余的子集。<br>\n  -你也可以将每个子集映射成二进制数。第i位可以表示元素是否在集合中的“布尔”标志。</p>\n","prev":{"title":"问题精析：前向运动学","link":"2020/08/02/问题精析：前向运动学"},"next":{"title":"问题3：堆盘子","link":"2020/07/31/问题3：堆盘子"},"plink":"http://Ssssshinji.github.io/2020/07/31/问题4：幂集/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"个人思路","title":"个人思路","index":"2"},{"id":"个人解答","title":"个人解答","index":"3"},{"id":"题目解析","title":"题目解析","index":"4"},{"id":"标准解答","title":"标准解答","index":"5"},{"id":"标准解答（进阶）","title":"标准解答（进阶）","index":"6"},{"id":"反思","title":"反思","index":"7"},{"id":"提示：#273，#290，#338，#354，#373","title":"提示：#273，#290，#338，#354，#373","index":"8"}]}