{"title":"问题精析：c#：IComparable和IComparer","date":"2020-07-27T16:05:03.000Z","date_formatted":{"ll":"Jul 28, 2020","L":"07/28/2020","MM-DD":"07-28"},"link":"2020/07/28/问题精析：c-：IComparable和IComparer","tags":["c#"],"categories":["问题精析"],"updated":"2020-07-27T16:25:32.331Z","content":"<h2 id=\"概念\">概念<a title=\"#概念\" href=\"#概念\"></a></h2>\n<p>  <strong>IComparable：可比较接口</strong>：IComparable 在要比较的对象的类中实现，可以比较该对象和另一个对象。IComparable提供了一个方法int CompareTo(object obj)。这个方法接受一个对象，所以可以实现这个接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassTest : IComparable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public int intTest;</span><br><span class=\"line\">  public int CompareTo(object obj)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;类型转换，这里的写法不安全，应该用as</span><br><span class=\"line\">    return intTest-((ClassTest)obj).intTest;</span><br><span class=\"line\">    &#x2F;&#x2F;这里的代码可以按需要自己编写，这里只是一个简单的示例</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ClassTest a &#x3D; new ClassTest()&#123;intTest&#x3D;1&#125;;</span><br><span class=\"line\">ClassTest b &#x3D; new ClassTest()&#123;intTest&#x3D;2&#125;;</span><br><span class=\"line\">Console.WriteLine(a.CompareTo(b));&#x2F;&#x2F;输出-1</span><br></pre></td></tr></table></figure>\n<p>  <strong>IComparer：比较器</strong>：IComparer 也提供了一个方法Compare()。这个方法接受两个对象，返回一个整型结果，这与 CompareTo()相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassTestComparer : IComparer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public static IComparer Default &#x3D; new ClassTestComparer();</span><br><span class=\"line\">  &#x2F;&#x2F;这里必须使用这样的定义，将对象转化为IComparer类型有很大用处，下面会介绍</span><br><span class=\"line\">  public int Compare(object a,object b)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    return ((ClassTest)a).intTest - ((ClassTest)b).intTest;</span><br><span class=\"line\">    &#x2F;&#x2F;同样这里使用最简单的示例，但是你可以大放异彩</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ClassTest a &#x3D; new ClassTest()&#123;intTest&#x3D;1&#125;;</span><br><span class=\"line\">ClassTest b &#x3D; new ClassTest()&#123;intTest&#x3D;2&#125;;</span><br><span class=\"line\">Console.WriteLine(ClassTestComparer.Default.Compare(a,b));</span><br><span class=\"line\">&#x2F;&#x2F;结果是-1</span><br></pre></td></tr></table></figure>\n<p> &amp;emsp两个接口提供的方法返回值都是int类型的，负数代表小于，0代表等于，正数代表大于。所以对数字之外的自定义比较器，需要人工设定什么是“大”，什么是“小”。所以上文示例中两个数直接相减，就可以比较大小。</p>\n<h2 id=\"注意事项\">注意事项<a title=\"#注意事项\" href=\"#注意事项\"></a></h2>\n<p>  在这两种情况下，提供给方法的参数是system.object类型。也就是说，可以比较任意类型的两个对象。所以，在返回结果之前，通常需要进行某种类型比较，如果使用了错误的类型，还会抛出异常。这种情况可以用泛型<T>来解决。<br>\n  对集合使用Sort()时，形参中是IComparer（比较器）类型。排序完之后，按照返回的int值，集合是由小到大排列的。<br>\n  使用无参Sort()时，集合中至少要有一个类实现了IComparable，否则会报错。<br>\n  不要使用new运算符直接创建Comparer类的实例，应调用Default方法，该方法将返回一个已被适当地初始化过的Comparer对象，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ComparertheComparer&#x3D;Comparer.Default；</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://blog.csdn.net/lidandan2016/article/details/78480237\" target=\"_blank\">c# 实现IComparable、IComparer接口、Comparer类的详解</a><br>\n   2. <a href=\"https://www.jianshu.com/p/2f2dd4829842\" target=\"_blank\">C# IComparable和IComparer接口和自定义比较器</a></p>\n","prev":{"title":"问题6：后继者","link":"2020/07/29/问题6：后继者"},"next":{"title":"问题2：变位词组","link":"2020/07/27/问题2：变位词组"},"plink":"http://Ssssshinji.github.io/2020/07/28/问题精析：c-：IComparable和IComparer/","toc":[{"id":"概念","title":"概念","index":"1"},{"id":"注意事项","title":"注意事项","index":"2"},{"id":"参考资料","title":"参考资料","index":"3"}]}