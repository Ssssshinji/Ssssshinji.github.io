{"title":"问题精析：PBR:基本原理及推导","date":"2020-07-12T10:24:55.000Z","date_formatted":{"ll":"Jul 12, 2020","L":"07/12/2020","MM-DD":"07-12"},"link":"2020/07/12/问题精析：PBR-基本原理及推导","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-12T11:39:49.391Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<p>  本节的理论和推导尽量简化和精简。<br>\n满足以下条件的光照模型才能称之为PBR光照模型：<br>\n  基于微平面模型（Be based on the microfacet surface model）。<br>\n  能量守恒（Be energy conserving）。<br>\n  使用基于物理的BRDF（Use a physically based BRDF）。</p>\n<h2 id=\"微平面（microfacet）\">微平面（Microfacet）<a title=\"#微平面（microfacet）\" href=\"#微平面（microfacet）\"></a></h2>\n<p>  大多数PBR技术都是基于微平面理论。在此理论下，认为在微观上所有材质表面都是由很多朝向不一的微小平面组成，有的材质表面光滑一些，有的粗糙一些。<br>\n  当光线射入这些微平面后，通常会产生镜面反射。对于越粗糙的表面，由于其朝向更无序，反射的光线更杂乱，反之，平滑的微平面，反射的光线更平齐。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001105154-1541680139.png\" alt=\"\" class=\"φcx\"></p>\n<p>  从微观角度来说，没有任何表面是完全光滑的。由于这些微平面已经微小到无法逐像素地继续对其进行细分，因此我们只有假设一个粗糙度(Roughness)参数，然后用统计学的方法来概略的估算微平面的粗糙程度。我们可以基于一个平面的粗糙度来计算出某个向量的方向与微平面平均取向方向一致的概率。这个向量便是位于光线向量l和视线向量v之间的中间向量，被称为<strong>半角向量(Halfway Vector)</strong>。半角向量h是视线v和入射光l的中间单位向量：<br>\n$$<br>\n\\frac{\\vec l + \\vec v}{\\lVert \\vec l + \\vec v \\rVert}<br>\n$$<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201903/1617944-20190309225859464-558296878.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; lightPos是光源位置，viewPos是摄像机位置，FragPos是像素位置</span><br><span class=\"line\">vec3 lightDir   &#x3D; normalize(lightPos - FragPos);</span><br><span class=\"line\">vec3 viewDir    &#x3D; normalize(viewPos - FragPos);</span><br><span class=\"line\">vec3 halfwayDir &#x3D; normalize(lightDir + viewDir);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001124143-1042432350.png\" alt=\"\"><br>\n粗糙度从0.1~1.0的变化图。粗糙度越小，镜面反射越亮范围越小；粗糙度越大，镜面反射越弱。（此处关于镜面反射的含义参考PBR）</p>\n<h3 id=\"能量守恒（energy-conservation）\">能量守恒（Energy Conservation）<a title=\"#能量守恒（energy-conservation）\" href=\"#能量守恒（energy-conservation）\"></a></h3>\n<p>  在概述中有详细介绍。故不再赘述。要点为，通常情况下，PBR会简化折射光，将平面上所有折射光都视为被完全吸收而不会散开。而有一些被称为次表面散射(Subsurface Scattering)技术的着色器技术会计算折射光散开后的模拟，它们可以显著提升一些材质（如皮肤、大理石或蜡质）的视觉效果，不过性能也会随着下降。<br>\n  金属(Metallic)材质会立即吸收所有折射光，故而金属只有镜面反射，而没有折射光引起的漫反射。<br>\n  根据上面的能量守恒关系，可以先计算镜面反射部分，此部分等于入射光线被反射的能量所占的百分比。而折射部分可以由镜面反射部分计算得出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; lightPos是光源位置，viewPos是摄像机位置，FragPos是像素位置</span><br><span class=\"line\">float kS &#x3D; calculateSpecularComponent(...); &#x2F;&#x2F; 反射&#x2F;镜面部分</span><br><span class=\"line\">float kD &#x3D; 1.0 - kS;                        &#x2F;&#x2F; 折射&#x2F;漫反射部分</span><br></pre></td></tr></table></figure>\n<p>  通过以上代码可以看出，镜面反射部分与漫反射部分的和肯定不会超过1.0，从而近似达到能量守恒的目的。</p>\n<h2 id=\"反射方程（reflectance-equation）\">反射方程（Reflectance Equation）<a title=\"#反射方程（reflectance-equation）\" href=\"#反射方程（reflectance-equation）\"></a></h2>\n<p>  渲染方程(Render Equation)是用来模拟光的视觉效果最好的模型。而PBR的渲染方程是用以抽象地描述PBR光照计算过程的特化版本的渲染方程，被称为反射方程。<br>\n  PBR的反射方程可抽象成下面的形式：<br>\n$$<br>\nL_o(p,\\omega_o) =\\int_{\\Omega} f_r(p,\\omega_i,\\omega_o)L_i(p,\\omega_i)n\\cdot\\omega_id\\omega_i<br>\n$$<br>\n  为了计算这个区域（半球）内的所有值，在反射方程中使用了一个称作为积分的数学符号 ∫，来计算半球Ω内所有的入射向量dωi。<br>\n  积分计算面积的方法，有解析(analytically)和渐近(numerically)两种方法。目前尚没有可以满足渲染计算的解析法，所以只能选择离散渐近法来解决这个积分问题。<br>\n  具体做法是在半球Ω按一定的步长将反射方程离散地求解，然后再按照步长大小将所得到的结果平均化，这种方法被称为黎曼和(Riemann sum)。下面是实现的伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int steps &#x3D; 100; &#x2F;&#x2F; 分段计算的数量，数量越多，计算结果越准确。</span><br><span class=\"line\">float dW  &#x3D; 1.0f &#x2F; steps;</span><br><span class=\"line\">vec3 P    &#x3D; ...;</span><br><span class=\"line\">vec3 Wo   &#x3D; ...;</span><br><span class=\"line\">vec3 N    &#x3D; ...;</span><br><span class=\"line\">float sum &#x3D; 0.0f;</span><br><span class=\"line\">for(int i &#x3D; 0; i &lt; steps; ++i) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vec3 Wi &#x3D; getNextIncomingLightDir(i);</span><br><span class=\"line\">    sum +&#x3D; Fr(P, Wi, Wo) * L(P, Wi) * dot(N, Wi) * dW;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  只剩下fr项未描述。fr就是双向反射分布函数(Bidirectional Reflectance Distribution Function, BRDF)，它的作用是基于表面材质属性来对入射辐射度进行缩放或者加权。</p>\n<h2 id=\"cook-torrance-brdf\">Cook-Torrance BRDF<a title=\"#cook-torrance-brdf\" href=\"#cook-torrance-brdf\"></a></h2>\n<p>  BRDF函数是近似的计算在一个给定了属性的不透明表面上每个单独的光线对最终的反射光的贡献量。<strong>假如表面是绝对光滑的（比如镜子），对于所有入射光ωi的BRDF函数都将会返回0.0，除非出射光线ωo方向的角度跟入射光线ωi方向的角度以面法线为中轴线完全对称，则返回1.0。</strong><br>\n  BRDF对于材质的反射和折射属性的模拟基于之前讨论过的微平面理论，想要BRDF在物理上是合理的，就必须遵守能量守恒定律。比如反射光能量总和永远不应该超过入射光。技术上来说，Blinn-Phong光照模型跟BRDF一样使用了ωi跟ωo作为输入参数，但是没有像基于物理的渲染这样严格地遵守能量守恒定律。<br>\n  BRDF有好几种模拟表面光照的算法，然而，基本上所有的<strong>实时</strong>渲染管线使用的都是Cook-Torrance BRDF。<br>\n  Cook-Torrance BRDF分为漫反射和镜面反射两个部分：<br>\n$$<br>\nf_r = k_df_{lambert} + k_sf_{(cook-torrance)}<br>\n$$<br>\n  其中kd是入射光中被折射的比例，ks是另外一部分被镜面反射的入射光。BRDF等式左边的flambert表示的是漫反射部分，这部分叫做兰伯特漫反射（Lambertian Diffuse）。在PBR-三种反射模型和PBR-BRDF中都有详细说明。</p>\n<blockquote>\n<p>此处的伦勃朗漫反射跟以前用的漫反射之间的关系：以前的漫反射是用表面的漫反射颜色乘以法线与面法线的点积，这个点积依然存在，只不过是被移到了BRDF外面，写作n⋅ωi，放在反射方程Lo靠后的位置。</p>\n</blockquote>\n<p>  BRDF的高光（镜面反射）部分更复杂：<br>\n$$<br>\nf_{(cook-torrance)} = \\frac{DFG}{4(\\omega_o\\cdot n)(\\omega_i\\cdot n)}<br>\n$$<br>\n  Cook-Torrance镜面反射BRDF由3个函数（D，F，G）和一个标准化因子构成。D，F，G符号各自近似模拟了特定部分的表面反射属性：<br>\n  D(Normal Distribution Function，NDF)：法线分布函数，估算在受到表面粗糙度的影响下，取向方向与中间向量一致的微平面的数量。这是用来估算微平面的主要函数。<br>\n  F(Fresnel equation)：菲涅尔方程，描述的是在不同的表面角下表面反射的光线所占的比率。<br>\n  G(Geometry function)：几何函数，描述了微平面自成阴影的属性。当一个平面相对比较粗糙的时候，平面表面上的微平面有可能挡住其他的微平面从而减少表面所反射的光线。</p>\n<h3 id=\"d(normal-distribution-function，ndf)\">D(Normal Distribution Function，NDF)<a title=\"#d(normal-distribution-function，ndf)\" href=\"#d(normal-distribution-function，ndf)\"></a></h3>\n<p>  法线分布函数，从统计学上近似的表示了与某些（如中间）向量h取向一致的微平面的比率。<br>\n  目前有很多种NDF都可以从统计学上来估算微平面的总体取向度，只要给定一些粗糙度的参数以及一个我们马上将会要用到的参数Trowbridge-Reitz GGX(GGXTR):<br>\n$$<br>\nNDF_{(GGXTR)}(n,h,\\alpha) = \\frac{\\alpha^2}{\\pi((n\\cdot h)^2(\\alpha^2 - 1)+1)^2}<br>\n$$<br>\n  这里的h是用来测量微平面的半角向量，α是表面的粗糙度，n是表面法线。 如果将h放到表面法线和光线方向之间，并使用不同的粗糙度作为参数，可以得到下面的效果：<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001124143-1042432350.png\" alt=\"\"><br>\n  当粗糙度很低（表面很光滑）时，与中间向量h取向一致的微平面会高度集中在一个很小的半径范围内。由于这种集中性，NDF最终会生成一个非常明亮的斑点。但是当表面比较粗糙的时候，微平面的取向方向会更加的随机，与向量h取向一致的微平面分布在一个大得多的半径范围内，但是较低的集中性也会让最终效果显得更加灰暗。<br>\n  Trowbridge-Reitz GGX的NDF实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float DistributionGGX(vec3 N, vec3 H, float a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float a2     &#x3D; a*a;</span><br><span class=\"line\">    float NdotH  &#x3D; max(dot(N, H), 0.0);</span><br><span class=\"line\">    float NdotH2 &#x3D; NdotH*NdotH;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    float nom    &#x3D; a2;</span><br><span class=\"line\">    float denom  &#x3D; (NdotH2 * (a2 - 1.0) + 1.0);</span><br><span class=\"line\">    denom        &#x3D; PI * denom * denom;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    return nom &#x2F; denom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"f(fresnel-equation)\">F(Fresnel equation)<a title=\"#f(fresnel-equation)\" href=\"#f(fresnel-equation)\"></a></h3>\n<p>  菲涅尔方程定义的是在不同观察方向上，表面上被反射的光除以被折射的光的比例。在一束光击中了表面的一瞬间，菲涅尔根据表面与观察方向之间的夹角，计算得到光被反射的百分比。根据这个比例和能量守恒定律我们可以直接知道剩余的能量就是会被折射的能量。<br>\n  当我们垂直观察每个表面或者材质时都有一个基础反射率，当我们以任意一个角度观察表面时所有的反射现象都会变得更明显（反射率高于基础反射率）。你可以从你身边的任意一件物体上观察到这个现象，当你以90度角观察你的桌子你会法线反射现象将会变得更加的明显，理论上以完美的90度观察任意材质的表面都应该会出现全反射现象（所有物体、材质都有菲涅尔现象）。<br>\n  菲涅尔方程同样是个复杂的方程，但是幸运的是菲涅尔方程可以使用Fresnel-Schlick来近似：<br>\n$$<br>\nF_{(Schlick)}(h,v,F_0) = F_0 + (1-F_0)(1-(h\\cdot v))^5<br>\n$$<br>\n  F0表示的是表面基础反射率，这个我们可以使用一种叫做Indices of refraction(IOR)的方法计算得到。运用在球面上的效果就是你看到的那样，观察方向越是接近掠射角（grazing angle，又叫切线角，与正视角相差90度），菲涅尔现象导致的反射就越强：<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001701664-134555730.png\" alt=\"\"><br>\n  菲涅尔方程中有几个微妙的地方，一个是Fresnel-Schlick算法仅仅是为电介质（绝缘体）表面定义的算法。对于金属表面，使用电介质的折射率来计算基础反射率是不合适的，我们需要用别的菲涅尔方程来计算。对于这个问题，我们需要预先计算表面在正视角(即以0度角正视表面)下的反应（F0），然后就可以跟之前的Fresnel-Schlick算法一样，根据观察角度来进行插值。这样我们就可以用一个方程同时计算金属和电介质了。<br>\n  表面在正视角下的反映或者说基础反射率可以在这个数据库中找到，下面是Naty Hoffman的在SIGGRAPH公开课中列举的一些常见材质的值：<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001721340-1348718167.png\" alt=\"\"><br>\n  这里可以观察到的一个有趣的现象，所有电介质材质表面的基础反射率都不会高于0.17，这其实是例外而非普遍情况。导体材质表面的基础反射率起点更高一些并且（大多）在0.5和1.0之间变化。此外，对于导体或者金属表面而言基础反射率一般是带有色彩的，这也是为什么要用RGB三原色来表示的原因（法向入射的反射率可随波长不同而不同）。这种现象我们只能在金属表面观察的到。<strong>(这也是为什么金属的高光有颜色，非导体的高光是一种灰色的原因)</strong><br>\n  通过预先计算电介质与导体的值，我们可以对两种类型的表面使用相同的Fresnel-Schlick近似，但是如果是金属表面的话就需要对基础反射率添加色彩。我们一般是按下面这个样子来实现的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 F0 &#x3D; vec3(0.04);</span><br><span class=\"line\">F0      &#x3D; mix(F0, surfaceColor.rgb, metalness);</span><br></pre></td></tr></table></figure>\n<p>  我们为大多数电介质表面定义了一个近似的基础反射率。F0取最常见的电解质表面的平均值，这又是一个近似值。不过对于大多数电介质表面而言使用0.04作为基础反射率已经足够好了，而且可以在不需要输入额外表面参数的情况下得到物理可信的结果。然后，基于金属表面特性，我们要么使用电介质的基础反射率要么就使用F0作来为表面颜色。因为金属表面会吸收所有折射光线而没有漫反射，所以我们可以直接使用表面颜色纹理来作为它们的基础反射率。<br>\n  Fresnel Schlick近似可以用GLSL代码实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 fresnelSchlick(float cosTheta, vec3 F0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  如果没有应用微面元模型，则有半角向量等于法向量 h=n,cosTheta便为表面法向量n与观察方向v的点乘的结果。。实际上，h向量的意义就是在微面元模型下替代法向量的作用，本文不再赘述。</p>\n<h3 id=\"g(geometry-function)\">G(Geometry function)<a title=\"#g(geometry-function)\" href=\"#g(geometry-function)\"></a></h3>\n<p>  几何函数模拟微平面相互遮挡导致光线的能量减少或丢失的现象。<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001746103-48046007.png\" alt=\"\"><br>\n  类似NDF，几何函数也使用粗糙度作为输入参数，更粗糙意味着微平面产生自阴影的概率更高。几何函数使用由GGX和Schlick-Beckmann组合而成的模拟函数Schlick-GGX：<br>\n$$<br>\nG_{(SchlickGGX)}(n,v,k) = \\frac{n\\cdot v}{(n\\cdot v)(1-k)+k}<br>\n$$<br>\n  这里的k是使用粗糙度α计算而来的，用于直接光照和IBL光照的几何函数的参数：<br>\n$$<br>\nk_{Pdirect} = \\frac{(\\alpha + 1)^2}{8}<br>\n$$<br>\n$$<br>\nk_{IBL} = \\frac{\\alpha^2}{2}<br>\n$$<br>\n$$<br>\nG_{(SchlickGGX)}(n,v,k) = \\frac{n\\cdot v}{(n\\cdot v)(1-k)+k}<br>\n$$<br>\n  为了有效地模拟几何体，我们需要同时考虑两个视角，视线方向（几何遮挡）跟光线方向（几何阴影），我们可以用Smith函数将两部分放到一起：<br>\n$$<br>\nG(n,v,l,k)=Gsub(n,v,k)Gsub(n,l,k)<br>\n$$<br>\n  其中v表示视线向量，Gsub(n,v,k)表示视线方向的几何遮挡；l表示光线向量，Gsub(n,l,k)表示光线方向的几何阴影。使用Smith函数与Schlick-GGX作为Gsub可以得到如下所示不同粗糙度R的视觉效果：<br>\n<img src=\"https://img2018.cnblogs.com/blog/1617944/201904/1617944-20190425001807090-418111030.png\" alt=\"\"><br>\n  使用GLSL编写的几何函数代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float GeometrySchlickGGX(float NdotV, float k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float nom   &#x3D; NdotV;</span><br><span class=\"line\">    float denom &#x3D; NdotV * (1.0 - k) + k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    return nom &#x2F; denom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float NdotV &#x3D; max(dot(N, V), 0.0);</span><br><span class=\"line\">    float NdotL &#x3D; max(dot(N, L), 0.0);</span><br><span class=\"line\">    float ggx1 &#x3D; GeometrySchlickGGX(NdotV, k); &#x2F;&#x2F; 视线方向的几何遮挡</span><br><span class=\"line\">    float ggx2 &#x3D; GeometrySchlickGGX(NdotL, k); &#x2F;&#x2F; 光线方向的几何阴影</span><br><span class=\"line\">\t</span><br><span class=\"line\">    return ggx1 * ggx2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://www.cnblogs.com/timlly/p/10631718.html?from=timeline&amp;isappinstalled=0#533-cook-torrance-brdf%E6%8E%A8%E5%AF%BC\" target=\"_blank\">由浅入深学习PBR的原理和实现</a></p>\n","prev":{"title":"问题精析：Early-z","link":"2020/07/14/问题精析：Early-z"},"next":{"title":"问题4：检查平衡性","link":"2020/07/11/问题4：检查平衡性"},"plink":"http://Ssssshinji.github.io/2020/07/12/问题精析：PBR-基本原理及推导/","toc":[{"id":"微平面（microfacet）","title":"微平面（Microfacet）","index":"1","children":[{"id":"能量守恒（energy-conservation）","title":"能量守恒（Energy Conservation）","index":"1.1"}]},{"id":"反射方程（reflectance-equation）","title":"反射方程（Reflectance Equation）","index":"2"},{"id":"cook-torrance-brdf","title":"Cook-Torrance BRDF","index":"3","children":[{"id":"d(normal-distribution-function，ndf)","title":"D(Normal Distribution Function，NDF)","index":"3.1"},{"id":"f(fresnel-equation)","title":"F(Fresnel equation)","index":"3.2"},{"id":"g(geometry-function)","title":"G(Geometry function)","index":"3.3"}]},{"id":"参考资料","title":"参考资料","index":"4"}]}