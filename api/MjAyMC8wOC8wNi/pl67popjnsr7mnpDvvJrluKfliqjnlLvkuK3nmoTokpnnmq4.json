{"title":"问题精析：帧动画中的蒙皮","date":"2020-08-06T03:40:59.000Z","date_formatted":{"ll":"Aug 6, 2020","L":"08/06/2020","MM-DD":"08-06"},"link":"2020/08/06/问题精析：帧动画中的蒙皮","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-08-06T05:05:01.102Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<h2 id=\"概念\">概念<a title=\"#概念\" href=\"#概念\"></a></h2>\n<p>  本小节介绍如何在关键帧动画中实现蒙皮算法。在蒙皮的关键帧中，为每个骨骼指定关键帧数据。回想一下，对于动画姿势中的每个骨骼i，我们需要计算\\(M_{i,w}\\)。它的定义是\\(M_{i-1,w}M_{i,p}M_{i,l}\\)。本地变换\\(M_{i,l}\\)通常是个旋转变化，ToParent矩阵\\(M_{i,p}\\)通常是个旋转和平移的组合。让我们将其组合成一个矩阵并称之为Mc。它左上角的3*3元素代表旋转变换，第4列代表平移变换。对于关键帧，Mc的旋转部分存储为四元数，而平移存储为向量。它们构成了骨骼的关键数据。</p>\n<h2 id=\"数学原理\">数学原理<a title=\"#数学原理\" href=\"#数学原理\"></a></h2>\n<p>  对于中间帧，将对关键帧的四元数和平移向量进行插值。插值四元数转换为矩阵。插值的平移向量填充矩阵的第四列，然后称为“插值Mc”。它与父骨骼的世界转换\\(M_{i-1,w}\\)结合，以完成\\(M_{i,w}\\)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for each bone &#x2F;&#x2F;default pose</span><br><span class=\"line\">    load Md-</span><br><span class=\"line\"></span><br><span class=\"line\">for each frame</span><br><span class=\"line\">    for each bone &#x2F;&#x2F;animated pose</span><br><span class=\"line\">        interpolate key data and compute Mc</span><br><span class=\"line\">        compute Mw</span><br><span class=\"line\">        combine Md- and Mw to define Mi</span><br><span class=\"line\">        store Mi into the matrix palette</span><br><span class=\"line\">    invoke vertex shader for skinning</span><br></pre></td></tr></table></figure>\n<p>  上面显示的是关键帧动画蒙皮的伪代码。第一个for循环将Md-（表示\\(M_{i,d}^{-1}\\)）指定给每个骨骼。对动画的每一帧运行第二个for循环。首先，使用“插值Mc”计算每个骨骼的Mw（表示\\(M_{i,w}\\)），然后将Mw与Md-结合，形成单个矩阵Mi。它存储在一个称为矩阵调色板(matrix palette)的表中。<br>\n  以上代码由CPU执行。一旦矩阵调色板填满了所有骨骼的Mi，CPU程序就会调用一个实现\\(v_w = \\sum_{i = 1}^{n}w_iM_{i,w}M_{i,d}^{-1}v_d\\)的顶点着色器。在游戏中，为了提高编程效率，影响顶点的骨骼数通常限制在4个。然后，对于多边形网格的每个顶点，分配两个一维数组，每个数组有四个元素。第一个数组包含矩阵调色板的索引，也就是说，它指向影响骨头。那个第二个数组包含混合权重（wi）。</p>\n<img src=\"/2020/08/06/%E9%97%AE%E9%A2%98%E7%B2%BE%E6%9E%90%EF%BC%9A%E5%B8%A7%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%9A%84%E8%92%99%E7%9A%AE/1.png\" class=\"\">\n<p>  顶点着色器的输入包括（1）默认姿势的多边形网格，（2）存储Mis的矩阵调色板，（3）包含调色板索引的一维数组，以及（4）包含混合权重的1D数组。<br>\n  上图说明了输入集和蒙皮动画的流程。考虑vd。它是默认姿势下多边形网格的顶点。我们的士兵角色有20个骨骼，因此矩阵调色板的大小为20。在本例中，影响vd的矩阵的指数为（0,2,7,18）。然后，将vd乘以M0、M2、M7和M18中的每一个（通过mul进行矩阵顶点乘法）。在示例中，使用混合权重（0.2,0.3,0.4,0.1）组合结果。得到的是vw。这种算法通常称为矩阵调色板混合（matrix palette blending）。</p>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"\">JungHyun Han - 3D Graphics for Game Programming-CRC Press (2011)</a></p>\n","next":{"title":"问题精析：蒙皮原理","link":"2020/08/06/问题精析：蒙皮原理"},"plink":"http://Ssssshinji.github.io/2020/08/06/问题精析：帧动画中的蒙皮/","toc":[{"id":"概念","title":"概念","index":"1"},{"id":"数学原理","title":"数学原理","index":"2"},{"id":"参考资料","title":"参考资料","index":"3"}]}