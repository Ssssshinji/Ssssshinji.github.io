{"title":"问题3：URL化","date":"2020-07-05T05:42:41.000Z","date_formatted":{"ll":"Jul 5, 2020","L":"07/05/2020","MM-DD":"07-05"},"link":"2020/07/05/问题3：URL化","tags":["数组与字符串"],"categories":["算法练习"],"updated":"2020-07-05T15:44:32.698Z","content":"<h2 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h2>\n<p><font size=4>  编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</font><br>\n示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:&quot;Mr John Smith    &quot;,13</span><br><span class=\"line\">输出:&quot;Mr%20John%20Smith&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人思路\">个人思路<a title=\"#个人思路\" href=\"#个人思路\"></a></h2>\n<p>  主要的是知道URL编码的转换规则，以及对一些特殊字符的转义处理。</p>\n<h2 id=\"个人解答\">个人解答<a title=\"#个人解答\" href=\"#个人解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无思路</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目解析\">题目解析<a title=\"#题目解析\" href=\"#题目解析\"></a></h2>\n<p>  处理字符串操作问题时，常见做法是从字符串尾部开始编辑，从后往前反向操作。该做法是上佳之选，因为字符串尾部有额外的缓冲，可以直接修改，不必担心会覆写原有数据。<br>\n  我们将采用上面这种做法。该算法会进行两次扫描。第一次扫描先数出字符串中有多少空格，从而算出最终的字符串长度。第二次扫描才真正开始反向编辑字符串。如果检测到空格，就将%20复制到下一个位置；若不是空格，就复制原先的字符。</p>\n<h2 id=\"标准解答\">标准解答<a title=\"#标准解答\" href=\"#标准解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void replaceSpaces(char[] str, int trueLength)&#123;</span><br><span class=\"line\">    int spaceCount &#x3D; 0,index &#x3D; 0,i;</span><br><span class=\"line\">    for(i &#x3D; 0;i&lt;trueLength;i++)&#123;</span><br><span class=\"line\">        if(str[i] &#x3D;&#x3D; &#39; &#39;)&#123;</span><br><span class=\"line\">            spaceCount++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index &#x3D; trueLength + 2*spaceCount;   </span><br><span class=\"line\">    char[] result &#x3D; new char[index];   </span><br><span class=\"line\">    for(i &#x3D; trueLength - 1; i &gt;&#x3D; 0; i--)&#123;</span><br><span class=\"line\">        System.Console.WriteLine(&quot;index:&quot; + index);</span><br><span class=\"line\">        System.Console.WriteLine(&quot;i:&quot; + i);</span><br><span class=\"line\">        if(str[i] &#x3D;&#x3D; &#39; &#39;)&#123;</span><br><span class=\"line\">            result[index - 1] &#x3D; &#39;0&#39;;</span><br><span class=\"line\">            result[index - 2] &#x3D; &#39;2&#39;;</span><br><span class=\"line\">            result[index - 3] &#x3D; &#39;%&#39;;</span><br><span class=\"line\">            index &#x3D; index - 3;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            result[index - 1] &#x3D; str[i];</span><br><span class=\"line\">            index--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h2>\n<p>  O(n)。</p>\n<h2 id=\"反思\">反思<a title=\"#反思\" href=\"#反思\"></a></h2>\n<p>  忽略了在进行编码后数组长度会有所改变。不过原书算法好像有点问题，偶尔会数组溢出，这里为自己写的版本。顺便一提c#中<strong>string和char[]做参数的区别</strong>: 用string[]表示字符串中相应位置的字符时，仅可读，而char[]是可读写的。并且string和char[]在形参中不能互相转换，要利用string.ToCharArray()和char[].ToString()。</p>\n<h2 id=\"提示：#53，#118\">提示：#53，#118<a title=\"#提示：#53，#118\" href=\"#提示：#53，#118\"></a></h2>\n<p>  -从尾到头开始修改字符串通常最容易。<br>\n  -你可能需要知道空格的数量。你能数一下吗？</p>\n","prev":{"title":"问题2：返回倒数第k个节点","link":"2020/07/05/问题2：返回倒数第k个节点"},"next":{"title":"问题精析：OpenGL纹理采样模式","link":"2020/07/03/问题精析：OpenGL纹理采样模式"},"plink":"http://Ssssshinji.github.io/2020/07/05/问题3：URL化/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"个人思路","title":"个人思路","index":"2"},{"id":"个人解答","title":"个人解答","index":"3"},{"id":"题目解析","title":"题目解析","index":"4"},{"id":"标准解答","title":"标准解答","index":"5"},{"id":"复杂度分析","title":"复杂度分析","index":"6"},{"id":"反思","title":"反思","index":"7"},{"id":"提示：#53，#118","title":"提示：#53，#118","index":"8"}]}