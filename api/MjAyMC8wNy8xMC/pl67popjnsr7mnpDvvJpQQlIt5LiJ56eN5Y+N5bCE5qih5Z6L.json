{"title":"问题精析：PBR:三种反射模型","date":"2020-07-09T18:35:40.000Z","date_formatted":{"ll":"Jul 10, 2020","L":"07/10/2020","MM-DD":"07-10"},"link":"2020/07/10/问题精析：PBR-三种反射模型","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-12T11:03:46.875Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<p>  PBR是近来一个新的，有意思的实时渲染方式。这个术语已经被传播得很广泛，但他的真实含义往往是混淆的。简单的回答是：这意味着很多。或者：这得看情况。这种回答并不能使人满意。所以我尝试着将PBR的真实含义，和它与传统的流程详细的解释清楚。这个文档主要是针对美术人员而非工程师。不会涉及数学或者代码类的东西。<br>\n  PBR和传统流程最主要的区别在于他<strong>更详细和科学的还原了光照和物理表面的关系原理</strong>。他的纹理系统已经大大的进化。而旧的生产流程和近似的表达方式可以安全的抛弃了。这代表着无论是工程师还是美术工作人员都需要理解这些变化的动机在哪里。<br>\n  我们需要从一些最基础的东西开始。这样我们可以在讲一些新东西之前对一些基本的概念有清楚的认识。你可能会觉得我讲的这些部分太枯燥乏味，但读过之后你会知道这些东西是值得的。你也可以了解一下Joe Wilson的文章：<a href=\"http://www.marmoset.co/toolbag/learn/pbr-practice\" target=\"_blank\">creating PBR artwork</a>。</p>\n<h2 id=\"漫反射(diffusion)\">漫反射(Diffusion)<a title=\"#漫反射(diffusion)\" href=\"#漫反射(diffusion)\"></a></h2>\n<p>  也称为散射，漫反射是最容易模拟的模型，现实中的例子也很多，例如石头，水泥，砖块等。最简单的Lambertian很简单粗暴的认为光线被均匀的反射到表面上方的半球中。</p>\n<blockquote>\n<p>生活中一般说的漫反射是指<strong>投射在粗糙表面上的光向各个方向反射的现象</strong>，与渲染中的概念有所区别。渲染中的漫反射(Diffusion)指散射，包含<strong>次表面散射</strong>。表面引起的反射，与粗糙程度相关的（生活中所说的漫反射和镜面反射），交给镜面反射(Specular)负责，由粗糙度(Roughness)控制。<strong>下文漫反射均代表渲染中的漫反射，也就是散射，而不是表面的反射。</strong></p>\n</blockquote>\n<p>  <strong>漫反射的性质通常用BRDF（双向反射分布函数）的漫反射分量来表示（基本是兰伯特模型，与粗糙程度无关）</strong>。一句话不严谨的概括BRDF既是输入一个入射的方向和一个出射的方向，输出一个出射光线和入射光线能量的比值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float Lambertian(Vector3 In, Vector3 Out)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 乘以PI的倒数是因为BRDF在半球内的积分需要为1，满足能量守恒</span><br><span class=\"line\">    return INV_PI;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  因为Lambertian模型均匀的反射出能量，所以返回值是一个常量和出射入射方向无关。下面是一个用Lambertian材质渲染的图片。<br>\n  Lambertian并不能很好的模拟现实中的许多漫反射材质，现实中完美的均匀反射当然几乎是不存在的，有些现实中的材质会在视线方向接近和表面平行的时候反射更多的光线等。所以当然有一些更复杂的数学模型去模拟更复杂的漫反射，例如Oren Nayar模型。<br>\n  Disney的Principled BRDF简单的用两个Fresnel项来增加入射角度低时反射的光线能量强度来模拟这种效果。好处是计算量相对小而且能打到足够的近似。贴一个我自己实现的伪代码，公式在最上面文档的链接5.3章节有，自行查阅。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float DisneyDiffuse(Vector3 In, Vector3 Out)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float oneMinusCosL &#x3D; 1.0f - AbsCosTheta(In);</span><br><span class=\"line\">    float oneMinusCosLSqr &#x3D; oneMinusCosL * oneMinusCosL;</span><br><span class=\"line\">    float oneMinusCosV &#x3D; 1.0f - AbsCosTheta(Out);</span><br><span class=\"line\">    float oneMinusCosVSqr &#x3D; oneMinusCosV * oneMinusCosV;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Roughness是粗糙度，IDotH的意思会在下一篇讲Microfacet模型时提到</span><br><span class=\"line\">    float IDotH &#x3D; Dot(In, Normalize(In + Out));</span><br><span class=\"line\">    float F_D90 &#x3D; 0.5f + 2.0f * IDotH * IDotH * Roughness;</span><br><span class=\"line\"></span><br><span class=\"line\">    return INV_PI * (1.0f + (F_D90 - 1.0f) * oneMinusCosLSqr * oneMinusCosLSqr * oneMinusCosL) *</span><br><span class=\"line\">\t\t(1.0f + (F_D90 - 1.0f) * oneMinusCosVSqr * oneMinusCosVSqr * oneMinusCosV);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"光滑镜面反射(specular)\">光滑镜面反射(Specular)<a title=\"#光滑镜面反射(specular)\" href=\"#光滑镜面反射(specular)\"></a></h2>\n<p>  最常见的就是镜子和玻璃一类的材质了，他们分别为导体和电介材质。镜面反射就只是将入射光线根据表面法线反射，并且只在反射方向有能量其他方向均为0。对玻璃这种电介材质则除了反射之外还有根据物体的折射率一部分光线会折射进入物体之中。<br>\n  最常见的就是镜子和玻璃一类的材质了，他们分别为导体和电介材质。镜面反射就只是将入射光线根据表面法线反射，并且只在反射方向有能量其他方向均为0。<br>\n  对玻璃这种电介材质则除了反射之外还有根据物体的折射率一部分光线会折射进入物体之中。反射和折射能量的多少是根据菲涅尔定律决定（Fresnel’s Law）。图形学中常常使用用Schlock的近似Fresnel，伪代码如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float Fresnel_Schlick(float InCosine, float normalReflectance)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; InCosine是入射光线和法线的夹角，normalReflectance是入射光线和法线垂直时的反射能量大小</span><br><span class=\"line\">\tfloat oneMinusCos &#x3D; 1.0f - InCosine;</span><br><span class=\"line\">\tfloat oneMinusCosSqr &#x3D; oneMinusCos * oneMinusCos;</span><br><span class=\"line\">\tfloat fresnel &#x3D; normalReflectance +</span><br><span class=\"line\">\t\t(1.0f - normalReflectance) * oneMinusCosSqr * oneMinusCosSqr * oneMinusCos;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn fresnel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  值得一提的是在<strong>离线渲染，光线追踪</strong>里这两种材质本身的着色很容易，只用根据反射和折射的方向射出新的光线然后递归的着色即可。在游戏<strong>实时渲染</strong>中反射通常是用屏幕空间的反射（Screen Space Reflection）和环境光照贴图两者结合实现的，折射也通常是用扭曲屏幕空间像素的方法。都会有一些Artifact，目前<strong>没有完美的解决方案</strong>。<br>\n  对于电介材质来说，除了本身的颜色以外，折射率是决定外观的另一个重要因素。折射率决定了折射光线的方向以及全反射的临界角度，上面的图片采用的折射率是1.5，也就是常见的玻璃的折射率，下面这张图则是用折射率2.42的渲染结果，对应的材质是钻石。根据菲涅尔定律，折射率越高的物体反射光线与折射光线的比值也越大，所以整个看起来更加Bling Bling了。<br>\n  当然现实中不存在完美平滑的表面。接下来提高真实感的一个手段就是对材质表面的法线进行扰动。法线贴图是方法之一。(PBR中多用微表面)</p>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://zhuanlan.zhihu.com/p/20091064\" target=\"_blank\">基于物理着色（一）</a></p>\n","prev":{"title":"问题精析：PBR:BRDF","link":"2020/07/10/问题精析：PBR-BRDF"},"next":{"title":"问题5：一次编辑","link":"2020/07/09/问题5：一次编辑"},"plink":"http://Ssssshinji.github.io/2020/07/10/问题精析：PBR-三种反射模型/","toc":[{"id":"漫反射(diffusion)","title":"漫反射(Diffusion)","index":"1"},{"id":"光滑镜面反射(specular)","title":"光滑镜面反射(Specular)","index":"2"},{"id":"参考资料","title":"参考资料","index":"3"}]}