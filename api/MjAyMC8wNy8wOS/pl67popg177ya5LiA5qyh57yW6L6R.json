{"title":"问题5：一次编辑","date":"2020-07-09T10:54:46.000Z","date_formatted":{"ll":"Jul 9, 2020","L":"07/09/2020","MM-DD":"07-09"},"link":"2020/07/09/问题5：一次编辑","tags":["数组与字符串"],"categories":["算法练习"],"updated":"2020-07-09T18:34:08.083Z","content":"<h2 id=\"题目描述\">题目描述<a title=\"#题目描述\" href=\"#题目描述\"></a></h2>\n<p><font size=4>  字符串有三种编辑操作：插入一个字符、删除一个字符或者替换一个字符。给定两个字符串，编写一个函数判定它们是否只需要一次（或者零次）编辑。</font><br>\n示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pale, ple -&gt; true</span><br><span class=\"line\">pales, pale -&gt; true</span><br><span class=\"line\">pale, bake -&gt; true</span><br><span class=\"line\">pale, bake -&gt; flase</span><br></pre></td></tr></table></figure>\n<h2 id=\"个人思路\">个人思路<a title=\"#个人思路\" href=\"#个人思路\"></a></h2>\n<p>  如果两个字符串长度相等，逐个比较就好，不同的地方最多只能有1处。如果两个字符长度相差1，分别用两个指针指向各自位置，如果出现不同，长的那个字符串的指针往后挪一位。之后再出现不同则返回false。</p>\n<h2 id=\"个人解答\">个人解答<a title=\"#个人解答\" href=\"#个人解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static bool CanOneEdit()&#123;</span><br><span class=\"line\">    string[] values &#x3D; Console.ReadLine().Split(&#39;,&#39;);</span><br><span class=\"line\">    string str1 &#x3D; values[0];</span><br><span class=\"line\">    string str2 &#x3D; values[1];</span><br><span class=\"line\">    bool oneDiff &#x3D; false;</span><br><span class=\"line\">    if(Math.Abs(str1.Length - str2.Length) &gt; 1)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(str1.Length &#x3D;&#x3D; str2.Length)&#123;</span><br><span class=\"line\">        int i &#x3D; 0;</span><br><span class=\"line\">        int j &#x3D; 0;</span><br><span class=\"line\">        for(i &#x3D; 0,j &#x3D; 0; i &lt; str1.Length;i++,j++)&#123;</span><br><span class=\"line\">            if(str1[i] !&#x3D; str2[j])&#123;</span><br><span class=\"line\">                if(oneDiff)&#123;</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else oneDiff &#x3D; true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(str1.Length - str2.Length &#x3D;&#x3D; 1)&#123;</span><br><span class=\"line\">        int i &#x3D; 0;</span><br><span class=\"line\">        int j &#x3D; 0;</span><br><span class=\"line\">        while(i &lt; str1.Length &amp;&amp; j &lt; str2.Length)&#123;</span><br><span class=\"line\">            if(str1[i] !&#x3D; str2[j])&#123;</span><br><span class=\"line\">                if(oneDiff)&#123;</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else oneDiff &#x3D; true;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(str1.Length - str2.Length &#x3D;&#x3D; -1)&#123;</span><br><span class=\"line\">        int i &#x3D; 0;</span><br><span class=\"line\">        int j &#x3D; 0;</span><br><span class=\"line\">        while(i &lt; str1.Length &amp;&amp; j &lt; str2.Length)&#123;</span><br><span class=\"line\">            if(str1[i] !&#x3D; str2[j])&#123;</span><br><span class=\"line\">                if(oneDiff)&#123;</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else oneDiff &#x3D; true;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目解析\">题目解析<a title=\"#题目解析\" href=\"#题目解析\"></a></h2>\n<p>  该题目可借助蛮力法。通过移除每一个字符（并比较），替换每一个字符（并比较），插入每一个字符（并比较）等方法，得到所有可能的字符串，然后检查只需一次编辑的字符串。该算法的运行时间过于缓慢，因此不用费尽心思来实现。<br>\n  对于此类问题，思考一下每一种操作的“意义”大有裨益。两个字符串之间需要一次插入、替换或删除操作意味着什么？<br>\n  **替换:**设想一下诸如bale和pale这样的两个字符串，它们之间相差一次替换操作。这确实意味着你可以通过替换bale中的一个字母来获得pale，但是更精确的说法是，这两个字符串仅在一个字符位置上有所不同。<br>\n  **插入:**字符串apple和aple之间相差一次插入操作。这意味着，如果你对比两个字符串，会发现除了在字符串上的某一位置需要整体移动一次以外，它们是完全相同的。<br>\n  **删除:**字符串apple和aple之间同样也可以表示为相差一次删除操作，因为删除操作只是“插入”的相反操作而已。</p>\n<h2 id=\"标准解答\">标准解答<a title=\"#标准解答\" href=\"#标准解答\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;和我的解答基本相同，写的更漂亮</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂度分析\">复杂度分析<a title=\"#复杂度分析\" href=\"#复杂度分析\"></a></h2>\n<p>  该算法的时间复杂度为O(n)，n是较短字符串的长度（几乎所有合理的算法都为该时间复杂度）。为什么运行时间由较短的字符串决定而不是由较长的字符串决定呢？如果两个字符串长度相同（相差一个字符），那么使用较长的字符串或者较短的字符串定义时间复杂度均可。如果它们的长度大不相同，那么算法会在O(1)的时间内结束。因此，一个非常长的字符串不会极大地增加运行时间。只有当两个字符串都很长的时候，时间复杂度才会增加。<br>\n  我们或许会注意到代码oneEditReplace和代码oneEditInsert相差无几。因此，可以将二者合并为一个方法。</p>\n<h2 id=\"标准解答（进阶）\">标准解答（进阶）<a title=\"#标准解答（进阶）\" href=\"#标准解答（进阶）\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool oneEditAway(string first, string second)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;检查长度</span><br><span class=\"line\">    if(Math.Abs(first.Length - second.Length) &gt; 1)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;获取较长或较短字符串</span><br><span class=\"line\">    string s1 &#x3D; first.Length &lt; second.Length ? first :second;</span><br><span class=\"line\">    string s2 &#x3D; first.Length &lt; second.Length ? second :first;</span><br><span class=\"line\">    int index1 &#x3D; 0;</span><br><span class=\"line\">    int index2 &#x3D; 0;</span><br><span class=\"line\">    bool foundDiff &#x3D; false;</span><br><span class=\"line\">    while(index2 &lt; s2.Length &amp;&amp; index1 &lt; s1.Length)&#123;</span><br><span class=\"line\">        if(s1[index1] !&#x3D; s2[index2])&#123;</span><br><span class=\"line\">            if(foundDiff)return false;</span><br><span class=\"line\">            foundDiff &#x3D; true;</span><br><span class=\"line\">            if(s1.Length &#x3D;&#x3D; s2.Length)&#123;</span><br><span class=\"line\">                index1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;匹配的话才移动较短的指针</span><br><span class=\"line\">            index1++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;总是移动较长的指针</span><br><span class=\"line\">        index2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  有些人或许会认为第一种方法更好，因为它更为清晰且更易理解。另外一些人则会认为第二种方法更好，因为该方法更加紧凑且重复代码更少（有助于代码的维护）。你并不需要站队，只需和面试官权衡利弊。</p>\n<h2 id=\"反思\">反思<a title=\"#反思\" href=\"#反思\"></a></h2>\n<p>  思路基本相同，但是代码比我的漂亮多了。切记整洁代码的原则，少参数，少行数，数十行的行代码要分成多个方法。</p>\n<h2 id=\"提示：#23，#97，#130\">提示：#23，#97，#130<a title=\"#提示：#23，#97，#130\" href=\"#提示：#23，#97，#130\"></a></h2>\n<p>  -从容易的事情开始。你能分别检查一下每一个条件吗？<br>\n  -“插入字符”选项和“删除字符”选项之间是何关系？这些需要分开检查吗？<br>\n  -你能一次完成三次检查吗？</p>\n","prev":{"title":"问题精析：PBR:三种反射模型","link":"2020/07/10/问题精析：PBR-三种反射模型"},"next":{"title":"问题精析：PBR概述","link":"2020/07/08/问题精析：PBR概述"},"plink":"http://Ssssshinji.github.io/2020/07/09/问题5：一次编辑/","toc":[{"id":"题目描述","title":"题目描述","index":"1"},{"id":"个人思路","title":"个人思路","index":"2"},{"id":"个人解答","title":"个人解答","index":"3"},{"id":"题目解析","title":"题目解析","index":"4"},{"id":"标准解答","title":"标准解答","index":"5"},{"id":"复杂度分析","title":"复杂度分析","index":"6"},{"id":"标准解答（进阶）","title":"标准解答（进阶）","index":"7"},{"id":"反思","title":"反思","index":"8"},{"id":"提示：#23，#97，#130","title":"提示：#23，#97，#130","index":"9"}]}