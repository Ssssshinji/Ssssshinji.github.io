{"title":"问题精析：PBR实现ByOpenGL（带纹理）","date":"2020-07-17T18:08:29.000Z","date_formatted":{"ll":"Jul 18, 2020","L":"07/18/2020","MM-DD":"07-18"},"link":"2020/07/18/问题精析：PBR实现ByOpenGL（带纹理）","tags":["计算机图形学"],"categories":["问题精析"],"updated":"2020-07-17T18:24:23.067Z","content":"<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"></script>\n<p>  片元着色器代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#version 330 core</span><br><span class=\"line\">out vec4 FragColor;</span><br><span class=\"line\">in vec2 TexCoords;</span><br><span class=\"line\">in vec3 WorldPos;</span><br><span class=\"line\">in vec3 Normal;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;光源相关</span><br><span class=\"line\">uniform vec3 lightPositions[4];</span><br><span class=\"line\">uniform vec3 lightColors[4];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;摄像机位置</span><br><span class=\"line\">uniform vec3 camPos;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;材质参数</span><br><span class=\"line\">uniform sampler2D albedoMap;</span><br><span class=\"line\">uniform sampler2D normalMap;</span><br><span class=\"line\">uniform sampler2D metallicMap;</span><br><span class=\"line\">uniform sampler2D roughnessMap;</span><br><span class=\"line\">uniform sampler2D aoMap;</span><br><span class=\"line\"></span><br><span class=\"line\">const float PI &#x3D; 3.14159265359;</span><br><span class=\"line\"></span><br><span class=\"line\">float DistributionGGX(vec3 N, vec3 H, float roughness);</span><br><span class=\"line\">float GeometrySchlickGGX(float NdotV, float roughness);</span><br><span class=\"line\">float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);</span><br><span class=\"line\">vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness);</span><br><span class=\"line\">vec3 fresnelSchlick(float cosTheta, vec3 F0);</span><br><span class=\"line\">vec3 getNormalFromMap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vec3 tangentNormal &#x3D; texture(normalMap, TexCoords).xyz * 2.0 - 1.0;</span><br><span class=\"line\"></span><br><span class=\"line\">    vec3 Q1  &#x3D; dFdx(WorldPos);</span><br><span class=\"line\">    vec3 Q2  &#x3D; dFdy(WorldPos);</span><br><span class=\"line\">    vec2 st1 &#x3D; dFdx(TexCoords);</span><br><span class=\"line\">    vec2 st2 &#x3D; dFdy(TexCoords);</span><br><span class=\"line\"></span><br><span class=\"line\">    vec3 N   &#x3D; normalize(Normal);</span><br><span class=\"line\">    vec3 T  &#x3D; normalize(Q1*st2.t - Q2*st1.t);</span><br><span class=\"line\">    vec3 B  &#x3D; -normalize(cross(N, T));</span><br><span class=\"line\">    mat3 TBN &#x3D; mat3(T, B, N);</span><br><span class=\"line\"></span><br><span class=\"line\">    return normalize(TBN * tangentNormal);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvec3 albedo     &#x3D; pow(texture(albedoMap, TexCoords).rgb, vec3(2.2));</span><br><span class=\"line\">    float metallic  &#x3D; texture(metallicMap, TexCoords).r;</span><br><span class=\"line\">    float roughness &#x3D; texture(roughnessMap, TexCoords).r;</span><br><span class=\"line\">    float ao        &#x3D; texture(aoMap, TexCoords).r;</span><br><span class=\"line\">\tvec3 N &#x3D; getNormalFromMap();</span><br><span class=\"line\">\tvec3 V &#x3D; normalize(camPos - WorldPos);</span><br><span class=\"line\">\tvec3 Lo &#x3D; vec3(0.0);</span><br><span class=\"line\">\tvec3 F0 &#x3D; vec3(0.04);</span><br><span class=\"line\">\tF0 &#x3D; mix(F0,albedo,metallic);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor(int i &#x3D; 0; i &lt; 4; i++)&#123;</span><br><span class=\"line\">\t\tvec3 L &#x3D; normalize(lightPositions[i] - WorldPos);</span><br><span class=\"line\">\t\tvec3 H &#x3D; normalize(V + L);</span><br><span class=\"line\">\t\tfloat distance &#x3D; length(lightPositions[i] - WorldPos);</span><br><span class=\"line\">\t\tfloat attenuation &#x3D; 1.0&#x2F;(distance * distance);</span><br><span class=\"line\">\t\tvec3 radiance &#x3D; lightColors[i] * attenuation;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; cook-torrance brdf</span><br><span class=\"line\">        float NDF &#x3D; DistributionGGX(N, H, roughness);        </span><br><span class=\"line\">        float G   &#x3D; GeometrySmith(N, V, L, roughness);      </span><br><span class=\"line\">        vec3 F    &#x3D; fresnelSchlick(max(dot(H, V), 0.0), F0);       </span><br><span class=\"line\"></span><br><span class=\"line\">        vec3 kS &#x3D; F;</span><br><span class=\"line\">        vec3 kD &#x3D; vec3(1.0) - kS;</span><br><span class=\"line\">        kD *&#x3D; 1.0 - metallic;     </span><br><span class=\"line\"></span><br><span class=\"line\">        vec3 nominator    &#x3D; NDF * G * F;</span><br><span class=\"line\">        float denominator &#x3D; 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; </span><br><span class=\"line\">        vec3 specular     &#x3D; nominator &#x2F; denominator;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; add to outgoing radiance Lo</span><br><span class=\"line\">        float NdotL &#x3D; max(dot(N, L), 0.0);                </span><br><span class=\"line\">        Lo +&#x3D; (kD * albedo &#x2F; PI + specular) * radiance * NdotL; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvec3 ambient &#x3D; vec3(0.03) * albedo * ao;</span><br><span class=\"line\">\tvec3 color &#x3D; ambient + Lo;</span><br><span class=\"line\">\tcolor &#x3D; color &#x2F; (color + vec3(1.0));</span><br><span class=\"line\">\tcolor &#x3D; pow(color,vec3(1.0&#x2F;2.2));</span><br><span class=\"line\">\tFragColor &#x3D; vec4(color,1.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vec3 fresnelSchlick(float cosTheta, vec3 F0)&#123;</span><br><span class=\"line\">\treturn F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float DistributionGGX(vec3 N, vec3 H, float roughness)&#123;</span><br><span class=\"line\">\tfloat a &#x3D; roughness * roughness;</span><br><span class=\"line\">\tfloat a2 &#x3D; a*a;</span><br><span class=\"line\">\tfloat NdotH &#x3D; max(dot(N,H),0.0);</span><br><span class=\"line\">\tfloat NdotH2 &#x3D; NdotH * NdotH;</span><br><span class=\"line\">\tfloat nom &#x3D; a2;</span><br><span class=\"line\">\tfloat denom &#x3D; (NdotH2 * (a2 - 1.0) + 1.0);</span><br><span class=\"line\">\tdenom &#x3D; PI * denom * denom;</span><br><span class=\"line\">\treturn nom &#x2F; denom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float GeometrySchlickGGX(float NdotV, float roughness)&#123;</span><br><span class=\"line\">\tfloat r &#x3D; (roughness + 1.0);</span><br><span class=\"line\">\tfloat k &#x3D; (r*r)&#x2F;8.0;</span><br><span class=\"line\">\tfloat nom &#x3D; NdotV;</span><br><span class=\"line\">\tfloat denom &#x3D; NdotV * (1 - k) + k;</span><br><span class=\"line\">\treturn nom &#x2F; denom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)&#123;</span><br><span class=\"line\">\tfloat NdotV &#x3D; max(dot(N,V),0.0);</span><br><span class=\"line\">\tfloat NdotL &#x3D; max(dot(N,L),0.0);</span><br><span class=\"line\">\tfloat ggx1 &#x3D; GeometrySchlickGGX(NdotV,roughness);</span><br><span class=\"line\">\tfloat ggx2 &#x3D; GeometrySchlickGGX(NdotL,roughness);</span><br><span class=\"line\">\treturn ggx1 * ggx2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料<a title=\"#参考资料\" href=\"#参考资料\"></a></h2>\n<p>   1. <a href=\"https://learnopengl-cn.github.io/07%20PBR/02%20Lighting/\" target=\"_blank\">光照</a></p>\n","prev":{"title":"问题6：字符串压缩","link":"2020/07/18/问题6：字符串压缩"},"next":{"title":"问题4：分割链表","link":"2020/07/17/问题4：分割链表"},"plink":"http://Ssssshinji.github.io/2020/07/18/问题精析：PBR实现ByOpenGL（带纹理）/","toc":[{"id":"参考资料","title":"参考资料","index":"1"}]}